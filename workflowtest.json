{
  "name": "Unternehmensstruktur Generator mit LLM v36",
  "nodes": [
    {
      "parameters": {},
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "config_branche",
              "name": "branche",
              "value": "Technologie",
              "type": "string"
            },
            {
              "id": "config_groesse",
              "name": "unternehmensgroesse",
              "value": "Mittel (100-500 Mitarbeiter)",
              "type": "string"
            },
            {
              "id": "config_land",
              "name": "land",
              "value": "Deutschland",
              "type": "string"
            },
            {
              "id": "config_besonderheit",
              "name": "besonderheit",
              "value": "Fokus auf nachhaltige Lösungen",
              "type": "string"
            },
            {
              "id": "config_hierarchie",
              "name": "hierarchie_ebenen",
              "value": "3",
              "type": "number"
            },
            {
              "id": "config_apikey",
              "name": "openai_api_key",
              "value": "DEIN-OPENAI-API-KEY",
              "type": "string"
            },
            {
              "id": "config_apqc_url",
              "name": "apqc_file_url",
              "value": "https://raw.githubusercontent.com/BLIKS-IO/n8n_demo_data_automation/main/APQC%20Cross%20industry%20deutsch.xlsx",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "a0b1c2d3-e4f5-6789-abcd-ef0123456789",
      "name": "Konfiguration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        450,
        300
      ],
      "notes": "HIER ANPASSEN: Branche, Größe, Land, Besonderheiten und OpenAI API Key"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte für Unternehmensstrukturen. Erstelle realistische fiktive Unternehmensdaten. Antworte immer mit validem JSON.'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle ein fiktives Unternehmen mit folgenden Vorgaben: Branche: ' + $json.branche + ', Größe: ' + $json.unternehmensgroesse + ', Land: ' + $json.land + ', Besonderheit: ' + $json.besonderheit + '. Erstelle ein JSON-Objekt mit den Feldern: id, name, branche, groesse, mitarbeiteranzahl, gruendungsjahr, hauptsitz, beschreibung, umsatz_mio, webseite.'\n    }\n  ],\n  temperature: 0.8\n}) }}",
        "options": {}
      },
      "id": "b2c3d4e5-f6a7-8901-bcde-f12345678901",
      "name": "HTTP: Unternehmen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const config = $('Konfiguration').first().json;\nconst response = $input.first().json.choices[0].message.content;\nconst unternehmen = JSON.parse(response);\nreturn { unternehmen, config };"
      },
      "id": "b3c4d5e6-f7a8-9012-bcde-f12345678902",
      "name": "JSON parsen (Unternehmen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte für Organisationsstrukturen. Antworte immer mit validem JSON im Format: {\"abteilungen\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle eine hierarchische Abteilungsstruktur für: ' + $json.unternehmen.name + ' (Branche: ' + $json.unternehmen.branche + ', Mitarbeiter: ' + $json.unternehmen.mitarbeiteranzahl + '). Erstelle ' + $json.config.hierarchie_ebenen + ' Hierarchie-Ebenen. Jede Abteilung braucht: id (dept_XXX), unternehmen_id (' + $json.unternehmen.id + '), name, ebene (1-' + $json.config.hierarchie_ebenen + '), parent_id (null für Ebene 1), budget_euro, mitarbeiteranzahl.'\n    }\n  ],\n  temperature: 0.7\n}) }}",
        "options": {}
      },
      "id": "c3d4e5f6-a7b8-9012-cdef-123456789012",
      "name": "HTTP: Abteilungen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, config } = $('JSON parsen (Unternehmen)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_object' || part.type === 'json_schema' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst abteilungen = data.abteilungen ?? data;\nreturn { unternehmen, abteilungen, config };"
      },
      "id": "c4d5e6f7-a8b9-0123-cdef-123456789013",
      "name": "JSON parsen (Abteilungen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'rollen_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          rollen: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                titel: { type: 'string' },\n                beschreibung: { type: 'string' },\n                ebene: { type: 'string', enum: ['Entry', 'Mid', 'Senior', 'Lead', 'Executive'] },\n                anzahl_personen: { type: 'integer', minimum: 1 },\n                gehalt_min: { type: 'number' },\n                gehalt_max: { type: 'number' },\n                anforderungen: {\n                  type: 'array',\n                  items: { type: 'string' },\n                  minItems: 2\n                }\n              },\n              required: ['id', 'abteilung_id', 'titel', 'beschreibung', 'ebene', 'anzahl_personen', 'gehalt_min', 'gehalt_max', 'anforderungen']\n            }\n          }\n        },\n        required: ['rollen']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Erstelle Rollen-Definitionen als JSON, das exakt dem gelieferten Schema entspricht. Verwende nur Daten aus dem Kontext.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Definiere Rollen für das folgende Unternehmen und seine Abteilungen.',\n        '',\n        'Kontext (Unternehmen):',\n        JSON.stringify({\n          id: $json.unternehmen.id,\n          name: $json.unternehmen.name,\n          branche: $json.unternehmen.branche,\n          mitarbeiteranzahl: $json.unternehmen.mitarbeiteranzahl,\n          gruendungsjahr: $json.unternehmen.gruendungsjahr,\n          hauptstandort: $json.unternehmen.hauptsitz\n        }, null, 2),\n        '',\n        'Abteilungen (Input):',\n        JSON.stringify($json.abteilungen, null, 2),\n        '',\n        'Anforderungen:',\n        '- Definiere 2-6 Rollen pro Abteilung mit unterschiedlichen Verantwortungsniveaus.',\n        '- Ebene muss einer der Werte Entry/Mid/Senior/Lead/Executive sein.',\n        '- anzahl_personen pro Abteilung soll in Summe zur mitarbeiteranzahl passen.',\n        '- Setze realistische Gehaltsbereiche basierend auf Branche und Ebene.',\n        '- anforderungen muss mindestens zwei Skills enthalten.',\n        '',\n        'Gib nur JSON zurück, keine Erklärungen.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.6\n}) }}",
        "options": {}
      },
      "id": "d1e2f3a4-b5c6-7890-cdef-234567890131",
      "name": "HTTP: Rollen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, config } = $('JSON parsen (Abteilungen)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst rollen = data.rollen ?? data;\nreturn { unternehmen, abteilungen, rollen, config };"
      },
      "id": "d2e3f4a5-b6c7-8901-cdef-234567890132",
      "name": "JSON parsen (Rollen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Antworte immer mit validem JSON im Format: {\"mitarbeiter\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle Mitarbeiter für ' + $json.unternehmen.name + ' (Land: ' + $json.config.land + ', Branche: ' + $json.unternehmen.branche + '). Es gibt ' + $json.rollen.length + ' Rollen. Jeder Mitarbeiter braucht: id (emp_XXX), rolle_id, abteilung_id, vorname, nachname, email, telefon, alter (25-65), gehalt_euro, eintrittsdatum (YYYY-MM-DD), vertrag (Vollzeit/Teilzeit), standort (' + $json.unternehmen.hauptsitz + '). Domain: ' + ($json.unternehmen.webseite ? $json.unternehmen.webseite.replace('www.','') : 'beispiel.de') + '. Namen zum Land passend. 85% Vollzeit.'\n    }\n  ],\n  temperature: 0.9\n}) }}",
        "options": {}
      },
      "id": "d3e4f5a6-b7c8-9012-cdef-234567890133",
      "name": "HTTP: Mitarbeiter erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1850,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, rollen, prozesse, config } = $('JSON parsen (Prozesse)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nlet mitarbeiter = data.mitarbeiter ?? data;\nmitarbeiter = mitarbeiter.map((ma, index) => ({\n  ...ma,\n  id: `emp_${String(index + 1).padStart(3, '0')}`,\n  unternehmen_id: unternehmen.id,\n  vollname: `${ma.vorname} ${ma.nachname}`\n}));\nreturn { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, config };"
      },
      "id": "d4e5f6a7-b8c9-0123-def0-123456789013",
      "name": "JSON parsen (Mitarbeiter)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2050,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const { unternehmen } = $input.first().json;\nreturn [{ json: unternehmen }];"
      },
      "id": "e1f2a3b4-c5d6-7890-ef01-234567890121",
      "name": "Unternehmen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2250,
        150
      ]
    },
    {
      "parameters": {
        "jsCode": "const { abteilungen } = $input.first().json;\nreturn abteilungen.map(abt => ({ json: abt }));"
      },
      "id": "e2f3a4b5-c6d7-8901-ef12-234567890122",
      "name": "Abteilungen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2250,
        250
      ]
    },
    {
      "parameters": {
        "jsCode": "const { rollen } = $input.first().json;\nreturn rollen.map(rolle => ({ json: rolle }));"
      },
      "id": "e3f4a5b6-c7d8-9012-ef23-234567890123",
      "name": "Rollen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2250,
        350
      ]
    },
    {
      "parameters": {
        "jsCode": "const { mitarbeiter } = $input.first().json;\nreturn mitarbeiter.map(ma => ({ json: ma }));"
      },
      "id": "e4f5a6b7-c8d9-0123-ef34-234567890124",
      "name": "Mitarbeiter extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2250,
        450
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "unternehmen.json"
        }
      },
      "id": "e5f6a7b8-c9d0-1234-ef01-234567890124",
      "name": "Unternehmen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2450,
        150
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "abteilungen.json"
        }
      },
      "id": "f6a7b8c9-d0e1-2345-f012-345678901235",
      "name": "Abteilungen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2450,
        250
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "rollen.json"
        }
      },
      "id": "f7a8b9c0-d1e2-3456-f123-345678901236",
      "name": "Rollen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2450,
        350
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "mitarbeiter.json"
        }
      },
      "id": "a7b8c9d0-e1f2-3456-0123-456789012346",
      "name": "Mitarbeiter JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2450,
        450
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByIndex",
        "options": {}
      },
      "id": "b8c9d0e1-f2a3-4567-1234-567890123457",
      "name": "Dateien zusammenführen",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2650,
        300
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByIndex",
        "options": {}
      },
      "id": "c9d0e1f2-a3b4-4567-8901-234567890145",
      "name": "Dateien + Rollen zusammenführen",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2850,
        300
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByIndex",
        "options": {}
      },
      "id": "d0e1f2a3-b4c5-5678-9012-345678901456",
      "name": "Alle Dateien zusammenführen",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3050,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.apqc_file_url }}",
        "responseFormat": "file",
        "options": {}
      },
      "id": "f8a9b0c1-d2e3-4567-f890-123456789147",
      "name": "APQC Datei lesen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        120
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "data",
        "options": {}
      },
      "id": "f9a0b1c2-d3e4-5678-f901-234567890148",
      "name": "APQC Tabelle zu JSON",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        850,
        120
      ]
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(item => item.json);\nconst processes = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID']).trim() === '3')\n  .map(row => ({\n    pcf_id: row['PCF ID'],\n    hierarchy_id: row['Hierarchy ID'],\n    name: row['Name'] ?? row['Name (German Translation) (not veriied)'] ?? row['Name (German Translation) (not verified)'] ?? '',\n    description: row['Element Description'] ?? row['Element Description (German Translation) (not verfied)'] ?? row['Element Description (German Translation) (not verified)'] ?? ''\n  }));\nreturn [{ json: { apqcProcesses: processes } }];"
      },
      "id": "g0a1b2c3-d4e5-6789-fa01-345678901459",
      "name": "APQC Prozesse filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1050,
        120
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByIndex",
        "options": {}
      },
      "id": "g1a2b3c4-d5e6-7890-fa12-456789012460",
      "name": "Kontext + Prozesse",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1650,
        200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'prozesse_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          prozesse: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                pcf_id: { type: 'string' },\n                name: { type: 'string' },\n                description: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                abteilung_name: { type: 'string' },\n                begruendung: { type: 'string' },\n                prioritaet: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] }\n              },\n              required: ['pcf_id', 'name', 'description', 'abteilung_id', 'abteilung_name']\n            }\n          }\n        },\n        required: ['prozesse']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Organisationsberater. Wähle passende APQC-Prozesse für das Unternehmen aus und ordne sie Verantwortungsbereichen (Abteilungen) zu. Antworte nur im JSON-Format, das dem Schema entspricht.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Unternehmenskontext:',\n        JSON.stringify({\n          name: $json.unternehmen.name,\n          branche: $json.unternehmen.branche,\n          mitarbeiteranzahl: $json.unternehmen.mitarbeiteranzahl,\n          besonderheit: $json.config.besonderheit\n        }, null, 2),\n        '',\n        'Abteilungen:',\n        JSON.stringify($json.abteilungen.map(a => ({ id: a.id, name: a.name, ebene: a.ebene, mitarbeiter: a.mitarbeiteranzahl })), null, 2),\n        '',\n        'Existierende Rollen (Beispiele):',\n        JSON.stringify($json.rollen.slice(0, 20).map(r => ({ id: r.id, abteilung_id: r.abteilung_id, titel: r.titel })), null, 2),\n        '',\n        'Verfügbare APQC-Prozesse (Level 3):',\n        JSON.stringify($json.apqcProcesses.slice(0, 200), null, 2),\n        '',\n        'Aufgabe:',\n        'Wähle 6-12 relevante Prozesse aus, die bestmöglich zur Strategie und Struktur des Unternehmens passen. Ordne jeden Prozess einer verantwortlichen Abteilung zu und gib eine kurze Begründung sowie eine Priorität (hoch/mittel/niedrig) an.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.5\n}) }}"
      },
      "id": "g2a3b4c5-d6e7-8901-fa23-567890123461",
      "name": "HTTP: Prozesse erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1850,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, rollen, config, apqcProcesses } = $('Kontext + Prozesse').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst prozesse = data.prozesse ?? data;\nreturn { unternehmen, abteilungen, rollen, prozesse, apqcProcesses, config };"
      },
      "id": "g3a4b5c6-d7e8-9012-fa34-678901234562",
      "name": "JSON parsen (Prozesse)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2050,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "const { prozesse } = $input.first().json;\nreturn prozesse.map(prozess => ({ json: prozess }));"
      },
      "id": "g4a5b6c7-d8e9-0123-fa45-789012345673",
      "name": "Prozesse extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2250,
        200
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "prozesse.json"
        }
      },
      "id": "g5a6b7c8-d9e0-1234-fa56-890123456784",
      "name": "Prozesse JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2450,
        200
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByIndex",
        "options": {}
      },
      "id": "g6a7b8c9-d0e1-2345-fa67-901234567895",
      "name": "Dateien + Prozesse zusammenführen",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2850,
        260
      ]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Konfiguration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Konfiguration": {
      "main": [
        [
          {
            "node": "HTTP: Unternehmen erstellen",
            "type": "main",
            "index": 0
          },
          {
            "node": "APQC Datei lesen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Unternehmen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Unternehmen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Unternehmen)": {
      "main": [
        [
          {
            "node": "HTTP: Abteilungen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Abteilungen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Abteilungen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Abteilungen)": {
      "main": [
        [
          {
            "node": "HTTP: Rollen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Rollen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Rollen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Rollen)": {
      "main": [
        [
          {
            "node": "Kontext + Prozesse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiter erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Mitarbeiter)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Mitarbeiter)": {
      "main": [
        [
          {
            "node": "Unternehmen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Abteilungen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Rollen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mitarbeiter extrahieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen extrahieren": {
      "main": [
        [
          {
            "node": "Unternehmen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen extrahieren": {
      "main": [
        [
          {
            "node": "Abteilungen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen extrahieren": {
      "main": [
        [
          {
            "node": "Rollen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter extrahieren": {
      "main": [
        [
          {
            "node": "Mitarbeiter JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenführen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenführen",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Rollen JSON": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenführen",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Mitarbeiter JSON": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenführen",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien zusammenführen": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenführen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dateien + Rollen zusammenführen": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenführen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Datei lesen": {
      "main": [
        [
          {
            "node": "APQC Tabelle zu JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Tabelle zu JSON": {
      "main": [
        [
          {
            "node": "APQC Prozesse filtern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Prozesse filtern": {
      "main": [
        [
          {
            "node": "Kontext + Prozesse",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Kontext + Prozesse": {
      "main": [
        [
          {
            "node": "HTTP: Prozesse erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Prozesse erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Prozesse)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Prozesse)": {
      "main": [
        [
          {
            "node": "HTTP: Mitarbeiter erstellen",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prozesse extrahieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse extrahieren": {
      "main": [
        [
          {
            "node": "Prozesse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse JSON": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenführen",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Prozesse zusammenführen": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenführen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-01T12:00:00.000Z",
  "versionId": "1"
}
