{
  "name": "Unternehmensstruktur Generator mit LLM v35",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4000,
        -176
      ],
      "id": "853c1867-3a9a-4bd9-a1b1-a5aa51054502",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "prozesse",
        "options": {
          "fileName": "prozesse.json"
        }
      },
      "id": "34c806e9-3046-4ca7-b2bd-2d0f9d060574",
      "name": "Prozesse JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4224,
        440
      ]
    },
    {
      "parameters": {
        "jsCode": "const { prozesse } = $input.first().json;\nreturn prozesse.map(prozess => ({ json: prozess }));"
      },
      "id": "ee050ba8-b450-4255-9633-be2ddd6d2f62",
      "name": "Prozesse extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4448,
        440
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first()?.json ?? {};\nreturn [{ json: data }];"
      },
      "id": "453f118f-3601-472b-8210-716c3949eedf",
      "name": "JSON parsen (Prozesse)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5568,
        704
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.requestPayload }}",
        "options": {
          "fullResponse": true,
          "responsePropertyName": "body"
        }
      },
      "id": "10362b7c-0cfc-44b2-8e78-94bf6827c948",
      "name": "HTTP: Prozesse erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5120,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "const getNodeJson = (nodeName) => {\n  try {\n    const item = $(nodeName).first();\n    return item?.json ?? {};\n  } catch (error) {\n    return {};\n  }\n};\n\nconst contextData = getNodeJson('JSON parsen (Rollen)');\nconst processData = getNodeJson('APQC Prozesse filtern');\nconst activityData = getNodeJson('APQC AktivitÃ¤ten filtern');\n\nreturn [{\n  json: {\n    ...contextData,\n    apqcProcesses: processData.apqcProcesses ?? [],\n    apqcActivities: activityData.apqcActivities ?? [],\n    apqcActivitiesByProcess: activityData.apqcActivitiesByProcess ?? {},\n  },\n}];\n"
      },
      "id": "4f85c2d7-8406-450f-8def-c30c8040856e",
      "name": "Kontext + Prozesse",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3776,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet rows = [];\nfor (const item of items) {\n  const data = item.json;\n  if (Array.isArray(data)) {\n    rows = rows.concat(data);\n  } else if (data && Array.isArray(data.data)) {\n    rows = rows.concat(data.data);\n  } else if (data) {\n    rows.push(data);\n  }\n}\nconst processes = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID'] ?? '').trim() === '3')\n  .map((row, index) => {\n    const hierarchyId = String(row['Hierarchy ID'] ?? '').trim();\n    const pcfId = String(row['PCF ID'] ?? '').trim();\n    const rawName = row['Name (German Translation) (not verified)'] ?? row['Name (German Translation) (not veriied)'] ?? row['Name'];\n    const rawDescription = row['Element Description (German Translation) (not verified)'] ?? row['Element Description (German Translation) (not verfied)'] ?? row['Element Description'];\n    const name = typeof rawName === 'string' ? rawName.trim() : '';\n    const description = typeof rawDescription === 'string' ? rawDescription.trim() : '';\n    return {\n      source_index: index,\n      pcf_id: pcfId,\n      hierarchy_id: hierarchyId,\n      name,\n      description\n    };\n  })\n  .filter(process => process.pcf_id && process.hierarchy_id && process.name && process.hierarchy_id.split('.').length === 3);\nreturn [{ json: { apqcProcesses: processes } }];"
      },
      "id": "522ff954-f8d7-485e-bf35-aab7818baea8",
      "name": "APQC Prozesse filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4224,
        -272
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.apqc_data_url }}",
        "options": {}
      },
      "id": "d18d90b3-5ae4-4edc-9795-a5dd1cf02199",
      "name": "APQC Datei lesen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4448,
        -368
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "mitarbeiter",
        "options": {
          "fileName": "mitarbeiter.json"
        }
      },
      "id": "68822ce3-1855-4a3b-8487-6b4d862bd219",
      "name": "Mitarbeiter JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3104,
        1376
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "rollen",
        "options": {
          "fileName": "rollen.json"
        }
      },
      "id": "eb56f797-a046-4581-be35-2d3e8b40b67c",
      "name": "Rollen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4448,
        992
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "abteilungen",
        "options": {
          "fileName": "abteilungen.json"
        }
      },
      "id": "aecc6593-415f-494c-9277-2f1f87ba7166",
      "name": "Abteilungen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4672,
        800
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "unternehmen",
        "options": {
          "fileName": "unternehmen.json"
        }
      },
      "id": "0bc66b8b-98ac-4309-8e50-aff64851ac4e",
      "name": "Unternehmen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -4672,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "const { mitarbeiter } = $input.first().json;\nreturn mitarbeiter.map(ma => ({ json: ma }));"
      },
      "id": "ceb93663-ca7c-4f99-be0f-340b0d3bafde",
      "name": "Mitarbeiter extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3328,
        1376
      ]
    },
    {
      "parameters": {
        "jsCode": "const { rollen } = $input.first().json;\nreturn rollen.map(rolle => ({ json: rolle }));"
      },
      "id": "9d65ba3e-a09e-42e5-a935-dac0d1a80ecd",
      "name": "Rollen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4672,
        992
      ]
    },
    {
      "parameters": {
        "jsCode": "const { abteilungen } = $input.first().json;\nreturn abteilungen.map(abt => ({ json: abt }));"
      },
      "id": "bf83e5c6-d718-47a5-9098-08c189d7524c",
      "name": "Abteilungen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4896,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "const { unternehmen } = $input.first().json;\nreturn [{ json: unternehmen }];"
      },
      "id": "9a1118ec-e25b-462d-95cc-df0b54e4683a",
      "name": "Unternehmen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4896,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "const getNodeJson = (nodeName) => {\n  try {\n    const item = $(nodeName).first();\n    return item?.json ?? {};\n  } catch (error) {\n    return {};\n  }\n};\n\nconst message = $input.first().json?.choices?.[0]?.message;\nif (!message) {\n  throw new Error('Antwort der Rollen-API fehlt oder ist leer.');\n}\n\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  prozesse = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = getNodeJson('JSON parsen (Prozesse)');\n\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart?.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\n\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\n\nconst data = JSON.parse(raw);\nlet mitarbeiter = data.mitarbeiter ?? data;\n\nmitarbeiter = mitarbeiter.map((ma, index) => ({\n  ...ma,\n  id: `emp_${String(index + 1).padStart(3, '0')}`,\n  unternehmen_id: unternehmen.id ?? '',\n  vollname: `${ma.vorname ?? ''} ${ma.nachname ?? ''}`.trim(),\n}));\n\nreturn { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\n"
      },
      "id": "e6d5788f-bc59-426a-8c99-ca64e4c50576",
      "name": "JSON parsen (Mitarbeiter)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5120,
        992
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Antworte immer mit validem JSON im Format: {\"mitarbeiter\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle Mitarbeiter fÃ¼r ' + $json.unternehmen.name + ' (Land: ' + $json.config.land + ', Branche: ' + $json.unternehmen.branche + '). Es gibt ' + $json.rollen.length + ' Rollen. Jeder Mitarbeiter braucht: id (emp_XXX), rolle_id, abteilung_id, vorname, nachname, email, telefon, alter (25-65), gehalt_euro, eintrittsdatum (YYYY-MM-DD), vertrag (Vollzeit/Teilzeit), standort (' + $json.unternehmen.hauptsitz + '). Domain: ' + ($json.unternehmen.webseite ? $json.unternehmen.webseite.replace('www.','') : 'beispiel.de') + '. Namen zum Land passend. 85% Vollzeit.'\n    }\n  ],\n  temperature: 0.9\n}) }}",
        "options": {}
      },
      "id": "a91efaad-f2dd-4e7b-b837-ddf3e1cf3113",
      "name": "HTTP: Mitarbeiter erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5344,
        992
      ]
    },
    {
      "parameters": {
        "jsCode": "\nconst input = $input.first()?.json ?? {};\nconst base = $('JSON parsen (Abteilungen)').first().json;\nlet rollen;\nlet extraConfig = {};\n\nif (input.choices?.[0]?.message) {\n  let raw = input.choices[0].message.content;\n  if (Array.isArray(raw)) {\n    const jsonPart = raw.find(part => part.type === 'json_object' || part.type === 'json_schema' || part.type === 'output_json');\n    if (jsonPart?.json) {\n      raw = jsonPart.json;\n    } else {\n      raw = raw.map(part => part.text ?? '').join('\n');\n    }\n  }\n  if (typeof raw === 'object') {\n    rollen = raw.rollen ?? raw;\n  } else {\n    const data = JSON.parse(raw);\n    rollen = data.rollen ?? data;\n  }\n} else if (input.rollen) {\n  rollen = input.rollen;\n  extraConfig = input.config || {};\n} else {\n  throw new Error('Keine Rollendaten verfÃ¼gbar.');\n}\n\nconst config = { ...base.config, ...extraConfig };\nreturn [{ json: { unternehmen: base.unternehmen, abteilungen: base.abteilungen, rollen, config } }];\n"
      },
      "id": "33d038d2-5b13-4b62-87fb-201d840348b0",
      "name": "JSON parsen (Rollen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4224,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'rollen_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          rollen: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                titel: { type: 'string' },\n                beschreibung: { type: 'string' },\n                ebene: { type: 'string', enum: ['Entry', 'Mid', 'Senior', 'Lead', 'Executive'] },\n                anzahl_personen: { type: 'integer', minimum: 1 },\n                gehalt_min: { type: 'number' },\n                gehalt_max: { type: 'number' },\n                anforderungen: {\n                  type: 'array',\n                  items: { type: 'string' },\n                  minItems: 2\n                }\n              },\n              required: ['id', 'abteilung_id', 'titel', 'beschreibung', 'ebene', 'anzahl_personen', 'gehalt_min', 'gehalt_max', 'anforderungen']\n            }\n          }\n        },\n        required: ['rollen']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Erstelle Rollen-Definitionen als JSON, das exakt dem gelieferten Schema entspricht. Verwende nur Daten aus dem Kontext.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Definiere Rollen fÃ¼r das folgende Unternehmen und seine Abteilungen.',\n        '',\n        'Kontext (Unternehmen):',\n        JSON.stringify({\n          id: $json.unternehmen.id,\n          name: $json.unternehmen.name,\n          branche: $json.unternehmen.branche,\n          mitarbeiteranzahl: $json.unternehmen.mitarbeiteranzahl,\n          gruendungsjahr: $json.unternehmen.gruendungsjahr,\n          hauptstandort: $json.unternehmen.hauptsitz\n        }, null, 2),\n        '',\n        'Abteilungen (Input):',\n        JSON.stringify($json.abteilungen, null, 2),\n        '',\n        'Anforderungen:',\n        '- Definiere 2-6 Rollen pro Abteilung mit unterschiedlichen Verantwortungsniveaus.',\n        '- Ebene muss einer der Werte Entry/Mid/Senior/Lead/Executive sein.',\n        '- anzahl_personen pro Abteilung soll in Summe zur mitarbeiteranzahl passen.',\n        '- Setze realistische Gehaltsbereiche basierend auf Branche und Ebene.',\n        '- anforderungen muss mindestens zwei Skills enthalten.',\n        '',\n        'Gib nur JSON zurÃ¼ck, keine ErklÃ¤rungen.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.6\n}) }}",
        "options": {}
      },
      "id": "ab845e2f-f966-4e65-b1ca-44648fe93ed2",
      "name": "HTTP: Rollen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4448,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "\nconst input = $input.first()?.json ?? {};\nconst base = $('JSON parsen (Unternehmen)').first().json;\nlet abteilungen;\nlet extraConfig = {};\n\nif (input.choices?.[0]?.message) {\n  let raw = input.choices[0].message.content;\n  if (Array.isArray(raw)) {\n    const jsonPart = raw.find(part => part.type === 'json_object' || part.type === 'json_schema' || part.type === 'output_json');\n    if (jsonPart?.json) {\n      raw = jsonPart.json;\n    } else {\n      raw = raw.map(part => part.text ?? '').join('\n');\n    }\n  }\n  if (typeof raw === 'object') {\n    abteilungen = raw.abteilungen ?? raw;\n  } else {\n    const data = JSON.parse(raw);\n    abteilungen = data.abteilungen ?? data;\n  }\n} else if (input.abteilungen) {\n  abteilungen = input.abteilungen;\n  extraConfig = input.config || {};\n} else {\n  throw new Error('Keine Abteilungsdaten verfÃ¼gbar.');\n}\n\nconst config = { ...base.config, ...extraConfig };\nreturn [{ json: { unternehmen: base.unternehmen, abteilungen, config } }];\n"
      },
      "id": "3a2cc552-2365-4c5d-af89-c647246333e8",
      "name": "JSON parsen (Abteilungen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4672,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte fÃ¼r Organisationsstrukturen. Antworte immer mit validem JSON im Format: {\"abteilungen\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle eine hierarchische Abteilungsstruktur fÃ¼r: ' + $json.unternehmen.name + ' (Branche: ' + $json.unternehmen.branche + ', Mitarbeiter: ' + $json.unternehmen.mitarbeiteranzahl + '). Erstelle ' + $json.config.hierarchie_ebenen + ' Hierarchie-Ebenen. Jede Abteilung braucht: id (dept_XXX), unternehmen_id (' + $json.unternehmen.id + '), name, ebene (1-' + $json.config.hierarchie_ebenen + '), parent_id (null fÃ¼r Ebene 1), budget_euro, mitarbeiteranzahl.'\n    }\n  ],\n  temperature: 0.7\n}) }}",
        "options": {}
      },
      "id": "3efe1b4c-ddd1-42fc-9a92-6c87401b56d7",
      "name": "HTTP: Abteilungen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4896,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "\nconst input = $input.first()?.json ?? {};\nconst configBase = { ...$('Konfiguration').first().json };\nlet unternehmen;\nlet extraConfig = {};\n\nif (input.choices?.[0]?.message) {\n  let raw = input.choices[0].message.content;\n  if (Array.isArray(raw)) {\n    const jsonPart = raw.find(part => part.type === 'json_object' || part.type === 'json_schema' || part.type === 'output_json');\n    if (jsonPart?.json) {\n      raw = jsonPart.json;\n    } else {\n      raw = raw.map(part => part.text ?? '').join('\n');\n    }\n  }\n  if (typeof raw === 'object') {\n    unternehmen = raw;\n  } else {\n    unternehmen = JSON.parse(raw);\n  }\n} else if (input.unternehmen) {\n  unternehmen = input.unternehmen;\n  extraConfig = input.config || {};\n} else {\n  throw new Error('Keine Unternehmensdaten verfÃ¼gbar.');\n}\n\nconst config = { ...configBase, ...extraConfig };\nreturn [{ json: { unternehmen, config } }];\n"
      },
      "id": "c65970b4-88e6-4461-9844-ebc1188db53a",
      "name": "JSON parsen (Unternehmen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5120,
        -80
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte fÃ¼r Unternehmensstrukturen. Erstelle realistische fiktive Unternehmensdaten. Antworte immer mit validem JSON.'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle ein fiktives Unternehmen mit folgenden Vorgaben: Branche: ' + $json.branche + ', GrÃ¶Ãe: ' + $json.unternehmensgroesse + ', Land: ' + $json.land + ', Besonderheit: ' + $json.besonderheit + '. Erstelle ein JSON-Objekt mit den Feldern: id, name, branche, groesse, mitarbeiteranzahl, gruendungsjahr, hauptsitz, beschreibung, umsatz_mio, webseite.'\n    }\n  ],\n  temperature: 0.8\n}) }}",
        "options": {}
      },
      "id": "2612544a-a71e-4efd-8a7e-eb4aabebb161",
      "name": "HTTP: Unternehmen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5344,
        -80
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "config_branche",
              "name": "branche",
              "value": "Technologie",
              "type": "string"
            },
            {
              "id": "config_groesse",
              "name": "unternehmensgroesse",
              "value": "Mittel (100-500 Mitarbeiter)",
              "type": "string"
            },
            {
              "id": "config_land",
              "name": "land",
              "value": "Deutschland",
              "type": "string"
            },
            {
              "id": "config_besonderheit",
              "name": "besonderheit",
              "value": "Fokus auf nachhaltige LÃ¶sungen",
              "type": "string"
            },
            {
              "id": "config_hierarchie",
              "name": "hierarchie_ebenen",
              "value": 3,
              "type": "number"
            },
            {
              "id": "config_apikey",
              "name": "openai_api_key",
              "value": "hey hier",
              "type": "string"
            },
            {
              "id": "config_apqc_url",
              "name": "apqc_data_url",
              "value": "https://raw.githubusercontent.com/BLIKS-IO/n8n_demo_data_automation/main/apqc.json",
              "type": "string"
            },
            {
              "id": "3f8e86c5-64d5-40e6-9b3f-bfbecb9a9a21",
              "name": "use_demo_unternehmen",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "21af6e50-b11f-4f72-8bfd-f4f857f45b33",
              "name": "use_demo_abteilungen",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "c5d665ad-9d9e-4c7a-b4ed-3c782210d43c",
              "name": "use_demo_rollen",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "2338115a-30fc-4ac1-8077-b881a4086811",
      "name": "Konfiguration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        -5568,
        -272
      ],
      "notes": "HIER ANPASSEN: Branche, GrÃ¶Ãe, Land, Besonderheiten und OpenAI API Key"
    },
    {
      "parameters": {},
      "id": "d683d4c5-2705-4ebb-8091-730e5691355a",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -5792,
        -272
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet rows = [];\nfor (const item of items) {\n  const data = item.json;\n  if (Array.isArray(data)) {\n    rows = rows.concat(data);\n  } else if (data && Array.isArray(data.data)) {\n    rows = rows.concat(data.data);\n  } else if (data) {\n    rows.push(data);\n  }\n}\nconst activities = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID'] ?? '').trim() === '4')\n  .map(row => {\n    const hierarchyId = String(row['Hierarchy ID'] ?? '').trim();\n    const parentHierarchyId = hierarchyId.includes('.') ? hierarchyId.split('.').slice(0, -1).join('.') : '';\n    return {\n      pcf_id: row['PCF ID'],\n      hierarchy_id: hierarchyId,\n      parent_hierarchy_id: parentHierarchyId,\n      name: row['Name (German Translation) (not veriied)'] ?? row['Name (German Translation) (not verified)'] ?? row['Name'] ?? '',\n      description: row['Element Description (German Translation) (not verfied)'] ?? row['Element Description (German Translation) (not verified)'] ?? row['Element Description'] ?? ''\n    };\n  });\nconst activitiesByProcess = activities.reduce((acc, activity) => {\n  const key = activity.parent_hierarchy_id || '';\n  if (!acc[key]) acc[key] = [];\n  acc[key].push(activity);\n  return acc;\n}, {});\nreturn [{ json: { apqcActivities: activities, apqcActivitiesByProcess: activitiesByProcess } }];\n"
      },
      "id": "d83b9d26-24ce-4b05-b3d3-f650021c71e1",
      "name": "APQC AktivitÃ¤ten filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4224,
        -464
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'aktivitaeten_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          aktivitaeten: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                prozess_id: { type: 'string' },\n                prozess_name: { type: 'string' },\n                apqc_hierarchy_id: { type: 'string' },\n                name: { type: 'string' },\n                beschreibung: { type: 'string' },\n                mitarbeiter_id: { type: 'string' },\n                mitarbeiter_name: { type: 'string' },\n                begruendung: { type: 'string' },\n                zeitbedarf_stunden: { type: 'number' },\n                prioritaet: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] }\n              },\n              required: ['id', 'prozess_id', 'name', 'beschreibung', 'mitarbeiter_id', 'mitarbeiter_name']\n            }\n          }\n        },\n        required: ['aktivitaeten']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Organisationsberater. Definiere operative AktivitÃ¤ten (APQC Level 4) fÃ¼r die Prozesse und weise geeignetes Personal zu. Antworte nur im validen JSON entsprechend dem Schema.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Kontext (Unternehmen):',\n        JSON.stringify($json.unternehmen, null, 2),\n        '',\n        'Prozesse (Level 3):',\n        JSON.stringify($json.prozesse, null, 2),\n        '',\n        'APQC-AktivitÃ¤ten je Prozess (Level 4):',\n        JSON.stringify(Object.fromEntries(Object.entries($json.apqcActivitiesByProcess).slice(0, 12)), null, 2),\n        '',\n        'Mitarbeiter (Auswahl):',\n        JSON.stringify($json.mitarbeiter.slice(0, 40).map(m => ({ id: m.id, name: m.vollname, rolle_id: m.rolle_id, abteilung_id: m.abteilung_id, ebene: m.ebene, kompetenzen: m.kompetenzen ?? [] })), null, 2),\n        '',\n        'Anforderungen:',\n        '- Erstelle pro Prozess 2-5 AktivitÃ¤ten (Level 4).',\n        '- Nutze bevorzugt passende APQC-AktivitÃ¤ten (hierarchy_id) und gib sie an.',\n        '- Fehlt eine passende AktivitÃ¤t, erfinde eine realistische Alternative und setze apqc_hierarchy_id auf null.',\n        '- Ordne jeder AktivitÃ¤t den bestgeeigneten Mitarbeiter zu und begrÃ¼nde kurz.',\n        '- Beschreibungen sollen konkrete Aufgaben enthalten und ggf. Level-5-Tasks einbetten.',\n        '- Streue realistische zeitbedarf_stunden (z.B. 2-40) und PrioritÃ¤ten (hoch/mittel/niedrig).',\n        '- Gib ausschlieÃlich JSON im vereinbarten Schema zurÃ¼ck.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.6\n}) }}",
        "options": {}
      },
      "name": "HTTP: AktivitÃ¤ten erstellen",
      "id": "d94738a8-e39a-47e7-996d-66d2de392145",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4896,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config } = $('JSON parsen (Mitarbeiter)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst aktivitaeten = data.aktivitaeten ?? data;\nreturn { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, aktivitaeten, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };"
      },
      "name": "JSON parsen (AktivitÃ¤ten)",
      "id": "637520c5-bdc8-4df7-8df0-cfc481359823",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4672,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "// Hole alle Daten aus dem vorherigen Node\nconst { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, aktivitaeten, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config } = $input.first().json;\n\n// Erstelle Lookup-Maps fÃ¼r schnellen Zugriff\nconst mitarbeiterMap = new Map(mitarbeiter.map(m => [m.id, m]));\nconst rollenMap = new Map(rollen.map(r => [r.id, r]));\nconst abteilungenMap = new Map(abteilungen.map(a => [a.id, a]));\nconst prozesseMap = new Map(prozesse.map(p => [p.pcf_id, p]));\n\n// Reichere jede AktivitÃ¤t mit vollstÃ¤ndigem Kontext an\nconst aktivitaetenMitKontext = aktivitaeten.map(aktivitaet => {\n  const mitarbeiter = mitarbeiterMap.get(aktivitaet.mitarbeiter_id) || {};\n  const rolle = rollenMap.get(mitarbeiter.rolle_id) || {};\n  const abteilung = abteilungenMap.get(mitarbeiter.abteilung_id) || {};\n  const prozess = prozesseMap.get(aktivitaet.prozess_id) || {};\n  \n  return {\n    json: {\n      ...aktivitaet,\n      mitarbeiter_kontext: {\n        id: mitarbeiter.id,\n        vollname: mitarbeiter.vollname,\n        vorname: mitarbeiter.vorname,\n        nachname: mitarbeiter.nachname,\n        rolle_id: mitarbeiter.rolle_id,\n        rolle_titel: rolle.titel,\n        rolle_ebene: rolle.ebene,\n        abteilung_id: mitarbeiter.abteilung_id,\n        abteilung_name: abteilung.name,\n        erfahrung_jahre: mitarbeiter.alter ? Math.floor((mitarbeiter.alter - 20) / 2) : 5\n      },\n      prozess_kontext: {\n        pcf_id: prozess.pcf_id,\n        name: prozess.name,\n        abteilung_name: prozess.abteilung_name\n      },\n      config: config\n    }\n  };\n});\n\nreturn aktivitaetenMitKontext;"
      },
      "name": "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern",
      "id": "589e6e25-0dd2-4baf-98cd-c2887543c9e8",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4448,
        1184
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Mitarbeiter, der seine tÃ¤glichen Aufgaben beschreibt. Schreibe in der Ich-Form, natÃ¼rlich und authentisch, wie du diese AktivitÃ¤ten ausfÃ¼hrst.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Mitarbeiter-Kontext:',\n        JSON.stringify({\n          name: $json.mitarbeiter_kontext.vollname,\n          rolle: $json.mitarbeiter_kontext.rolle_titel,\n          ebene: $json.mitarbeiter_kontext.rolle_ebene,\n          abteilung: $json.mitarbeiter_kontext.abteilung_name,\n          erfahrung_jahre: $json.mitarbeiter_kontext.erfahrung_jahre\n        }, null, 2),\n        '',\n        'AktivitÃ¤t:',\n        JSON.stringify({\n          name: $json.name,\n          prozess: $json.prozess_kontext.name,\n          technische_beschreibung: $json.beschreibung,\n          zeitbedarf_stunden: $json.zeitbedarf_stunden,\n          prioritaet: $json.prioritaet\n        }, null, 2),\n        '',\n        'Aufgabe:',\n        'Beschreibe in 2-4 SÃ¤tzen in der Ich-Form, wie du diese AktivitÃ¤t in deinem Arbeitsalltag ausfÃ¼hrst. Sei konkret und praxisnah. Beziehe dich auf typische Tools, Kollegen (ohne Namen) oder Herausforderungen. Die Beschreibung soll authentisch klingen, als wÃ¼rdest du einem neuen Kollegen erklÃ¤ren, was du machst.',\n        '',\n        'Gib das Ergebnis als JSON zurÃ¼ck: {\"beschreibung_mitarbeiter\": \"...\"}'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.8\n}) }}",
        "options": {}
      },
      "name": "HTTP: Mitarbeiterbeschreibungen generieren",
      "id": "93df8a36-273f-4d43-9c0f-6444b3afbfab",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4224,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "// Hole die ursprÃ¼ngliche AktivitÃ¤t und die API-Antwort\nconst originalAktivitaet = $input.first().json;\nconst apiResponse = $input.first().json.choices?.[0]?.message?.content;\n\nif (!apiResponse) {\n  // Falls keine Antwort, gebe OriginalaktivitÃ¤t zurÃ¼ck\n  const { mitarbeiter_kontext, prozess_kontext, config, ...aktivitaetOhneTemp } = originalAktivitaet;\n  return [{\n    json: {\n      ...aktivitaetOhneTemp,\n      beschreibung_mitarbeiter: 'Beschreibung konnte nicht generiert werden.'\n    }\n  }];\n}\n\n// Parse die API-Antwort\nlet parsedResponse;\ntry {\n  parsedResponse = typeof apiResponse === 'string' ? JSON.parse(apiResponse) : apiResponse;\n} catch (e) {\n  parsedResponse = { beschreibung_mitarbeiter: 'Fehler beim Parsen der Beschreibung.' };\n}\n\n// Entferne die temporÃ¤ren Kontextfelder und fÃ¼ge die Mitarbeiterbeschreibung hinzu\nconst { mitarbeiter_kontext, prozess_kontext, config, choices, ...aktivitaetOhneTemp } = originalAktivitaet;\n\nreturn [{\n  json: {\n    ...aktivitaetOhneTemp,\n    beschreibung_mitarbeiter: parsedResponse.beschreibung_mitarbeiter || 'Keine Beschreibung verfÃ¼gbar.'\n  }\n}];"
      },
      "name": "Beschreibungen zusammenfÃ¼hren",
      "id": "b439f356-79ad-49a2-9e73-dd7edc267af9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4000,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "// Sammle alle angereicherten AktivitÃ¤ten\nconst aktivitaeten = $input.all().map(item => item.json);\n\nreturn [{ json: { aktivitaeten } }];"
      },
      "name": "AktivitÃ¤ten aggregieren",
      "id": "41053e8a-60d3-4748-9945-d605d4106dde",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3776,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "const { aktivitaeten } = $input.first().json;\nreturn aktivitaeten.map(act => ({ json: act }));"
      },
      "name": "AktivitÃ¤ten extrahieren",
      "id": "7134cab2-47f5-412f-85a1-0770d0813011",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3552,
        1184
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "aktivitaeten",
        "options": {
          "fileName": "aktivitaeten.json"
        }
      },
      "name": "AktivitÃ¤ten JSON",
      "id": "030540fb-6fde-4ff9-ac8e-3418d2f75f9c",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3328,
        1184
      ]
    },
    {
      "parameters": {},
      "id": "d38e5734-adae-4fb6-84e3-dff2768fc8b7",
      "name": "Dateien zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4448,
        704
      ]
    },
    {
      "parameters": {},
      "id": "75e66d4e-52bf-42c2-97c0-a8061a84ae4c",
      "name": "Dateien + Rollen zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4224,
        800
      ]
    },
    {
      "parameters": {},
      "id": "dde04a76-0b6e-46c4-8025-fc71348abe4a",
      "name": "Dateien + Prozesse zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -4000,
        704
      ]
    },
    {
      "parameters": {},
      "id": "c7c31859-6de1-4e2c-bdea-8f576847832b",
      "name": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3104,
        800
      ]
    },
    {
      "parameters": {},
      "id": "bb99420b-8b1f-4d74-9ff9-f33f5058dc8d",
      "name": "Alle Dateien zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2880,
        896
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -2656,
        896
      ],
      "id": "057784ac-7189-46d4-b248-567c5f554c08",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = input;\n\nconst sortAbteilungen = (list) => {\n  return [...list]\n    .map((abteilung, index) => ({ ...abteilung, __index: index }))\n    .sort((a, b) => {\n      const levelA = Number(a.ebene ?? 999);\n      const levelB = Number(b.ebene ?? 999);\n      if (Number.isFinite(levelA) && Number.isFinite(levelB)) {\n        if (levelA !== levelB) return levelA - levelB;\n      } else if (Number.isFinite(levelA)) {\n        return -1;\n      } else if (Number.isFinite(levelB)) {\n        return 1;\n      }\n      const mitA = Number(a.mitarbeiteranzahl ?? 0);\n      const mitB = Number(b.mitarbeiteranzahl ?? 0);\n      if (mitA !== mitB) return mitB - mitA;\n      return (a.name || '').localeCompare(b.name || '');\n    });\n};\n\nconst sortedWithIndex = sortAbteilungen(abteilungen);\nconst sortedAbteilungen = sortedWithIndex.map(({ __index, ...rest }) => rest);\n\nconst globalData = $getWorkflowStaticData('global');\nglobalData.availableProcesses = Array.isArray(apqcProcesses) ? apqcProcesses.map(proc => ({ ...proc })) : [];\nglobalData.assignedProcesses = [];\nglobalData.context = { unternehmen, abteilungen: sortedAbteilungen, rollen, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\nglobalData.remainingDepartments = sortedAbteilungen.length;\n\nreturn sortedAbteilungen.map((abteilung, index) => ({ json: { abteilung, position: index } }));"
      },
      "id": "9e80d400-02ed-44cd-a17a-741cd20328b6",
      "name": "Prozessiteration vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5792,
        216
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "85c75415-8c60-4138-b44b-2d0de2a27954",
      "name": "Abteilungen iterieren",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -5568,
        216
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst abteilung = input.abteilung || {};\nconst position = input.position ?? 0;\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.context || {};\nconst availableProcesses = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\n\nconst limitProcesses = (processes, limit = 120) => {\n  if (processes.length <= limit) return processes;\n  return processes.slice(0, limit);\n};\n\nconst prozessPool = limitProcesses(availableProcesses);\nconst rollenGesamt = Array.isArray(context.rollen) ? context.rollen : [];\nconst rollen = rollenGesamt.filter(rolle => rolle.abteilung_id === abteilung.id).slice(0, 10);\n\nconst unternehmen = context.unternehmen || {};\nconst config = context.config || {};\n\nconst systemPrompt = \"Du bist Organisations- und Prozessberater. Erstelle fÃ¼r die angegebene Abteilung 2-4 passende APQC-Prozesse auf Ebene 3. Verwende ausschlieÃlich die bereitgestellten Prozessdaten (PCF ID, Hierarchy ID, Name, Beschreibung) unverÃ¤ndert. Jeder Prozess darf nur einmal verwendet werden.\";\n\nconst abteilungsInfo = {\n  id: abteilung.id,\n  name: abteilung.name,\n  ebene: abteilung.ebene,\n  mitarbeiter: abteilung.mitarbeiteranzahl,\n};\n\nconst rollenInfo = rollen.map(rolle => ({\n  id: rolle.id,\n  titel: rolle.titel,\n  ebene: rolle.ebene,\n}));\n\nconst unternehmensInfo = {\n  name: unternehmen.name,\n  branche: unternehmen.branche,\n  mitarbeiteranzahl: unternehmen.mitarbeiteranzahl,\n  besonderheit: config.besonderheit || null,\n};\n\nconst userSections = [\n  \"Unternehmenskontext:\",\n  JSON.stringify(unternehmensInfo, null, 2),\n  \"\",\n  \"Abteilung:\",\n  JSON.stringify(abteilungsInfo, null, 2),\n  \"\",\n  \"Rollen in dieser Abteilung (Auszug):\",\n  JSON.stringify(rollenInfo, null, 2),\n  \"\",\n  \"VerfÃ¼gbare APQC-Prozesse Level 3:\",\n  JSON.stringify(prozessPool, null, 2),\n  \"\",\n  \"Aufgabe:\",\n  \"WÃ¤hle 2-4 Prozesse aus der Liste aus, die bestmÃ¶glich zu den Aufgaben der Abteilung passen. Verwende die gelieferten IDs, Namen und Beschreibungen unverÃ¤ndert. Gib je Prozess eine kurze BegrÃ¼ndung und eine PrioritÃ¤t (hoch/mittel/niedrig) an. Antworte im JSON-Format laut Schema.\",\n];\n\nconst requestPayload = {\n  model: \"gpt-4o-mini\",\n  temperature: 0.2,\n  response_format: {\n    type: \"json_schema\",\n    json_schema: {\n      name: \"prozesse_response\",\n      schema: {\n        type: \"object\",\n        additionalProperties: false,\n        properties: {\n          prozesse: {\n            type: \"array\",\n            minItems: 1,\n            items: {\n              type: \"object\",\n              additionalProperties: false,\n              properties: {\n                pcf_id: { type: \"string\", pattern: \"^[0-9]+$\" },\n                hierarchy_id: { type: \"string\", pattern: \"^[0-9]+\\.[0-9]+\\.[0-9]+$\" },\n                name: { type: \"string\" },\n                description: { type: \"string\" },\n                abteilung_id: { type: \"string\" },\n                abteilung_name: { type: \"string\" },\n                begruendung: { type: \"string\" },\n                prioritaet: { type: \"string\", enum: [\"hoch\", \"mittel\", \"niedrig\"] },\n              },\n              required: [\"pcf_id\", \"hierarchy_id\", \"name\", \"description\", \"abteilung_id\", \"abteilung_name\"],\n            },\n          },\n        },\n        required: [\"prozesse\"],\n      },\n    },\n  },\n  messages: [\n    { role: \"system\", content: systemPrompt },\n    { role: \"user\", content: userSections.join(\"\\n\") },\n  ],\n};\n\nreturn [\n  {\n    json: {\n      unternehmen,\n      abteilung,\n      rollen,\n      prozessPool,\n      config,\n      position,\n      requestPayload,\n    },\n  },\n];"
      },
      "id": "4878ed7c-8cfe-4662-b47e-c1c0becfb26f",
      "name": "Abteilungskontext erstellen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5344,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst response = input.body ?? input;\nconst message = response.choices?.[0]?.message;\nlet raw = message?.content;\nif (!raw) {\n  throw new Error('Antwort der Prozesse-API fehlt oder ist leer.');\n}\n\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart?.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\n');\n  }\n}\n\nlet data;\nif (typeof raw === 'object') {\n  data = raw;\n} else {\n  try {\n    data = JSON.parse(raw);\n  } catch (error) {\n    throw new Error('Antwort konnte nicht als JSON geparst werden: ' + error.message);\n  }\n}\n\nif (!data || !Array.isArray(data.prozesse)) {\n  throw new Error('Die KI-Antwort enthÃ¤lt keine gÃ¼ltige Prozessliste.');\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst assigned = Array.isArray(globalData.assignedProcesses) ? globalData.assignedProcesses : [];\n\nfor (const prozess of data.prozesse) {\n  assigned.push({\n    ...prozess,\n    abteilung_id: prozess.abteilung_id,\n    abteilung_name: prozess.abteilung_name,\n  });\n}\n\nglobalData.assignedProcesses = assigned;\n\ndata.prozesse = data.prozesse.map(prozess => ({ ...prozess }));\n\nreturn [\n  {\n    json: {\n      prozesse: data.prozesse,\n    },\n  },\n];"
      },
      "id": "ca4b42e0-9546-4aff-962e-b660789b69ec",
      "name": "Prozessantwort parsen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4896,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst selected = Array.isArray(input.prozesse) ? input.prozesse : [];\nconst globalData = $getWorkflowStaticData('global');\nconst available = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\n\nconst selectedIds = new Set(selected.map(prozess => String(prozess.pcf_id || '').trim()));\nconst remaining = available.filter(proc => !selectedIds.has(String(proc.pcf_id || '').trim()));\n\nglobalData.availableProcesses = remaining;\nconst currentRemaining = Number(globalData.remainingDepartments ?? remaining.length);\nconst updatedRemaining = Math.max(0, currentRemaining - 1);\nglobalData.remainingDepartments = updatedRemaining;\n\nconst isFinal = updatedRemaining === 0;\n\nreturn [\n  {\n    json: {\n      prozesse: selected,\n      isFinal,\n    },\n  },\n];"
      },
      "id": "ccc98c30-a86f-485c-9f75-7431c0216871",
      "name": "VerfÃ¼gbare Prozesse aktualisieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4672,
        216
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nif (!input.isFinal) {\n  return [];\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.context || {};\nconst result = {\n  unternehmen: context.unternehmen || {},\n  abteilungen: context.abteilungen || [],\n  rollen: context.rollen || [],\n  prozesse: globalData.assignedProcesses || [],\n  apqcProcesses: context.apqcProcesses || [],\n  apqcActivities: context.apqcActivities || [],\n  apqcActivitiesByProcess: context.apqcActivitiesByProcess || {},\n  config: context.config || {},\n};\n\nglobalData.availableProcesses = [];\nglobalData.assignedProcesses = [];\nglobalData.context = {};\nglobalData.remainingDepartments = 0;\n\nreturn [\n  {\n    json: result,\n  },\n];"
      },
      "id": "2d8e0d36-6cd9-42a1-873c-b36028e509c1",
      "name": "Prozessiteration Abschluss",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5792,
        704
      ]
    },
    {
      "id": "7a04115c-3a35-4894-a0c0-869cb297cf7b",
      "name": "Unternehmen Demo Daten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5120,
        -400
      ],
      "parameters": {
        "jsCode": "const config = $('Konfiguration').first().json;\nconst unternehmen = JSON.parse(String.raw`{\"id\": \"12345678\", \"name\": \"EcoTech Solutions GmbH\", \"branche\": \"Technologie\", \"groesse\": \"Mittel\", \"mitarbeiteranzahl\": 250, \"gruendungsjahr\": 2015, \"hauptsitz\": \"Berlin, Deutschland\", \"beschreibung\": \"EcoTech Solutions GmbH entwickelt innovative Technologien mit einem klaren Fokus auf nachhaltige LÃ¶sungen. Unsere Produkte und Dienstleistungen unterstÃ¼tzen Unternehmen dabei, umweltfreundlicher zu arbeiten und ihre CO2-Bilanz zu verbessern.\", \"umsatz_mio\": 45, \"webseite\": \"www.ecotechsolutions.de\"}`);\nreturn [{ json: { unternehmen, config } }];"
      }
    },
    {
      "id": "037cbed2-dc80-436a-bb3c-ff234fd7a12d",
      "name": "IF Unternehmen Demo?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1.1,
      "position": [
        -5344,
        -272
      ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.use_demo_unternehmen }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "8155d7ca-fb4c-422d-bd30-1bd7158d73a0",
      "name": "Abteilungen Demo Daten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4480,
        -112
      ],
      "parameters": {
        "jsCode": "const base = $('JSON parsen (Unternehmen)').first().json;\nconst abteilungen = JSON.parse(String.raw`[{\"id\": \"dept_001\", \"unternehmen_id\": 12345678, \"name\": \"GeschÃ¤ftsfÃ¼hrung\", \"ebene\": 1, \"parent_id\": null, \"budget_euro\": 500000, \"mitarbeiteranzahl\": 5}, {\"id\": \"dept_002\", \"unternehmen_id\": 12345678, \"name\": \"Forschung & Entwicklung\", \"ebene\": 2, \"parent_id\": \"dept_001\", \"budget_euro\": 1200000, \"mitarbeiteranzahl\": 80}, {\"id\": \"dept_003\", \"unternehmen_id\": 12345678, \"name\": \"Vertrieb\", \"ebene\": 2, \"parent_id\": \"dept_001\", \"budget_euro\": 800000, \"mitarbeiteranzahl\": 40}, {\"id\": \"dept_004\", \"unternehmen_id\": 12345678, \"name\": \"Marketing\", \"ebene\": 2, \"parent_id\": \"dept_001\", \"budget_euro\": 600000, \"mitarbeiteranzahl\": 30}, {\"id\": \"dept_005\", \"unternehmen_id\": 12345678, \"name\": \"IT-Support\", \"ebene\": 2, \"parent_id\": \"dept_001\", \"budget_euro\": 300000, \"mitarbeiteranzahl\": 15}, {\"id\": \"dept_006\", \"unternehmen_id\": 12345678, \"name\": \"Finanzen\", \"ebene\": 2, \"parent_id\": \"dept_001\", \"budget_euro\": 400000, \"mitarbeiteranzahl\": 10}, {\"id\": \"dept_007\", \"unternehmen_id\": 12345678, \"name\": \"Produktentwicklung\", \"ebene\": 3, \"parent_id\": \"dept_002\", \"budget_euro\": 700000, \"mitarbeiteranzahl\": 50}, {\"id\": \"dept_008\", \"unternehmen_id\": 12345678, \"name\": \"QualitÃ¤tssicherung\", \"ebene\": 3, \"parent_id\": \"dept_002\", \"budget_euro\": 200000, \"mitarbeiteranzahl\": 20}, {\"id\": \"dept_009\", \"unternehmen_id\": 12345678, \"name\": \"Vertrieb Innendienst\", \"ebene\": 3, \"parent_id\": \"dept_003\", \"budget_euro\": 300000, \"mitarbeiteranzahl\": 20}, {\"id\": \"dept_010\", \"unternehmen_id\": 12345678, \"name\": \"Vertrieb AuÃendienst\", \"ebene\": 3, \"parent_id\": \"dept_003\", \"budget_euro\": 500000, \"mitarbeiteranzahl\": 20}, {\"id\": \"dept_011\", \"unternehmen_id\": 12345678, \"name\": \"Content Marketing\", \"ebene\": 3, \"parent_id\": \"dept_004\", \"budget_euro\": 250000, \"mitarbeiteranzahl\": 10}, {\"id\": \"dept_012\", \"unternehmen_id\": 12345678, \"name\": \"SEO/SEM\", \"ebene\": 3, \"parent_id\": \"dept_004\", \"budget_euro\": 200000, \"mitarbeiteranzahl\": 10}, {\"id\": \"dept_013\", \"unternehmen_id\": 12345678, \"name\": \"Helpdesk\", \"ebene\": 3, \"parent_id\": \"dept_005\", \"budget_euro\": 150000, \"mitarbeiteranzahl\": 5}]`);\nreturn [{ json: { unternehmen: base.unternehmen, abteilungen, config: base.config } }];"
      }
    },
    {
      "id": "2de3b715-f795-4260-9add-8223e4885249",
      "name": "IF Abteilungen Demo?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1.1,
      "position": [
        -4704,
        -112
      ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.config.use_demo_abteilungen }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "4791579c-db81-4140-b4d1-d167782d0a82",
      "name": "Rollen Demo Daten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3552,
        64
      ],
      "parameters": {
        "jsCode": "const base = $('JSON parsen (Abteilungen)').first().json;\nconst rollen = JSON.parse(String.raw`[{\"id\": \"role_001\", \"abteilung_id\": \"dept_001\", \"titel\": \"GeschÃ¤ftsfÃ¼hrer\", \"beschreibung\": \"Leitet das Unternehmen und verantwortet die strategische Ausrichtung.\", \"ebene\": \"Executive\", \"anzahl_personen\": 1, \"gehalt_min\": 120000, \"gehalt_max\": 180000, \"anforderungen\": [\"FÃ¼hrungskompetenz\", \"Strategisches Denken\"]}, {\"id\": \"role_002\", \"abteilung_id\": \"dept_001\", \"titel\": \"Assistenz der GeschÃ¤ftsfÃ¼hrung\", \"beschreibung\": \"UnterstÃ¼tzt die GeschÃ¤ftsfÃ¼hrung bei administrativen Aufgaben und Projekten.\", \"ebene\": \"Mid\", \"anzahl_personen\": 1, \"gehalt_min\": 50000, \"gehalt_max\": 70000, \"anforderungen\": [\"Organisationstalent\", \"KommunikationsfÃ¤higkeit\"]}, {\"id\": \"role_003\", \"abteilung_id\": \"dept_002\", \"titel\": \"Forschungsleiter\", \"beschreibung\": \"Leitet das Forschungsteam und koordiniert Forschungsprojekte.\", \"ebene\": \"Lead\", \"anzahl_personen\": 1, \"gehalt_min\": 90000, \"gehalt_max\": 130000, \"anforderungen\": [\"Projektmanagement\", \"Technisches Wissen\"]}, {\"id\": \"role_004\", \"abteilung_id\": \"dept_002\", \"titel\": \"Forschungsingenieur\", \"beschreibung\": \"Entwickelt neue Technologien und Produkte im Bereich Forschung.\", \"ebene\": \"Senior\", \"anzahl_personen\": 5, \"gehalt_min\": 70000, \"gehalt_max\": 100000, \"anforderungen\": [\"Analytische FÃ¤higkeiten\", \"Programmierung\"]}, {\"id\": \"role_005\", \"abteilung_id\": \"dept_002\", \"titel\": \"Praktikant Forschung\", \"beschreibung\": \"UnterstÃ¼tzt das Team bei der DurchfÃ¼hrung von Experimenten und Analysen.\", \"ebene\": \"Entry\", \"anzahl_personen\": 5, \"gehalt_min\": 30000, \"gehalt_max\": 40000, \"anforderungen\": [\"KommunikationsfÃ¤higkeit\", \"Teamarbeit\"]}, {\"id\": \"role_006\", \"abteilung_id\": \"dept_003\", \"titel\": \"Vertriebsleiter\", \"beschreibung\": \"Leitet das Vertriebsteam und entwickelt Vertriebsstrategien.\", \"ebene\": \"Lead\", \"anzahl_personen\": 1, \"gehalt_min\": 80000, \"gehalt_max\": 120000, \"anforderungen\": [\"Verhandlungsgeschick\", \"Kundenorientierung\"]}, {\"id\": \"role_007\", \"abteilung_id\": \"dept_003\", \"titel\": \"Vertriebsmitarbeiter Innendienst\", \"beschreibung\": \"Bearbeitet Kundenanfragen und unterstÃ¼tzt den AuÃendienst.\", \"ebene\": \"Mid\", \"anzahl_personen\": 10, \"gehalt_min\": 40000, \"gehalt_max\": 60000, \"anforderungen\": [\"Verkaufskompetenz\", \"Kundenservice\"]}, {\"id\": \"role_008\", \"abteilung_id\": \"dept_003\", \"titel\": \"Vertriebsmitarbeiter AuÃendienst\", \"beschreibung\": \"Akquiriert neue Kunden und pflegt bestehende Kundenbeziehungen.\", \"ebene\": \"Senior\", \"anzahl_personen\": 9, \"gehalt_min\": 60000, \"gehalt_max\": 90000, \"anforderungen\": [\"Selbstmotivation\", \"Verhandlungsgeschick\"]}, {\"id\": \"role_009\", \"abteilung_id\": \"dept_004\", \"titel\": \"Marketingmanager\", \"beschreibung\": \"Entwickelt und implementiert Marketingstrategien.\", \"ebene\": \"Lead\", \"anzahl_personen\": 1, \"gehalt_min\": 70000, \"gehalt_max\": 100000, \"anforderungen\": [\"KreativitÃ¤t\", \"Analytische FÃ¤higkeiten\"]}, {\"id\": \"role_010\", \"abteilung_id\": \"dept_004\", \"titel\": \"Content Creator\", \"beschreibung\": \"Erstellt Inhalte fÃ¼r verschiedene MarketingkanÃ¤le.\", \"ebene\": \"Mid\", \"anzahl_personen\": 5, \"gehalt_min\": 40000, \"gehalt_max\": 60000, \"anforderungen\": [\"Schreibkompetenz\", \"KreativitÃ¤t\"]}, {\"id\": \"role_011\", \"abteilung_id\": \"dept_004\", \"titel\": \"SEO/SEM Spezialist\", \"beschreibung\": \"Optimiert die Online-Sichtbarkeit und fÃ¼hrt Kampagnen durch.\", \"ebene\": \"Senior\", \"anzahl_personen\": 4, \"gehalt_min\": 50000, \"gehalt_max\": 80000, \"anforderungen\": [\"Analytische FÃ¤higkeiten\", \"Technisches Wissen\"]}, {\"id\": \"role_012\", \"abteilung_id\": \"dept_005\", \"titel\": \"IT-Support Spezialist\", \"beschreibung\": \"Bietet technischen Support und lÃ¶st IT-Probleme.\", \"ebene\": \"Mid\", \"anzahl_personen\": 7, \"gehalt_min\": 40000, \"gehalt_max\": 60000, \"anforderungen\": [\"Technisches Wissen\", \"ProblemlÃ¶sungsfÃ¤higkeiten\"]}, {\"id\": \"role_013\", \"abteilung_id\": \"dept_005\", \"titel\": \"Helpdesk Mitarbeiter\", \"beschreibung\": \"Bearbeitet Supportanfragen und sorgt fÃ¼r Kundenzufriedenheit.\", \"ebene\": \"Entry\", \"anzahl_personen\": 5, \"gehalt_min\": 30000, \"gehalt_max\": 40000, \"anforderungen\": [\"KommunikationsfÃ¤higkeit\", \"Technisches Wissen\"]}, {\"id\": \"role_014\", \"abteilung_id\": \"dept_006\", \"titel\": \"Finanzleiter\", \"beschreibung\": \"Verantwortet die Finanzstrategie und das Budget des Unternehmens.\", \"ebene\": \"Lead\", \"anzahl_personen\": 1, \"gehalt_min\": 80000, \"gehalt_max\": 120000, \"anforderungen\": [\"Finanzanalyse\", \"FÃ¼hrungskompetenz\"]}, {\"id\": \"role_015\", \"abteilung_id\": \"dept_006\", \"titel\": \"Buchhalter\", \"beschreibung\": \"Verarbeitet Buchhaltungsunterlagen und erstellt Finanzberichte.\", \"ebene\": \"Mid\", \"anzahl_personen\": 4, \"gehalt_min\": 40000, \"gehalt_max\": 60000, \"anforderungen\": [\"Detailgenauigkeit\", \"Analytische FÃ¤higkeiten\"]}, {\"id\": \"role_016\", \"abteilung_id\": \"dept_006\", \"titel\": \"Finanzanalyst\", \"beschreibung\": \"Analysiert Finanzdaten und unterstÃ¼tzt bei der Budgetplanung.\", \"ebene\": \"Senior\", \"anzahl_personen\": 5, \"gehalt_min\": 60000, \"gehalt_max\": 90000, \"anforderungen\": [\"Analytische FÃ¤higkeiten\", \"Finanzkenntnisse\"]}]`);\nreturn [{ json: { unternehmen: base.unternehmen, abteilungen: base.abteilungen, rollen, config: base.config } }];"
      }
    },
    {
      "id": "ce9f438f-6088-4e5b-96fe-180dfd09f1b8",
      "name": "IF Rollen Demo?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1.1,
      "position": [
        -3776,
        64
      ],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.config.use_demo_rollen }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Kontext + Prozesse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse extrahieren": {
      "main": [
        [
          {
            "node": "Prozesse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Prozesse)": {
      "main": [
        [
          {
            "node": "Prozesse extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP: Mitarbeiter erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Prozesse erstellen": {
      "main": [
        [
          {
            "node": "Prozessantwort parsen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Prozesse filtern": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Datei lesen": {
      "main": [
        [
          {
            "node": "APQC Prozesse filtern",
            "type": "main",
            "index": 0
          },
          {
            "node": "APQC AktivitÃ¤ten filtern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter extrahieren": {
      "main": [
        [
          {
            "node": "Mitarbeiter JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen extrahieren": {
      "main": [
        [
          {
            "node": "Rollen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen extrahieren": {
      "main": [
        [
          {
            "node": "Abteilungen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen extrahieren": {
      "main": [
        [
          {
            "node": "Unternehmen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Mitarbeiter)": {
      "main": [
        [
          {
            "node": "Mitarbeiter extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Rollen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Abteilungen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Unternehmen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP: AktivitÃ¤ten erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiter erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Mitarbeiter)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Rollen)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP: Rollen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Rollen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Abteilungen)": {
      "main": [
        [
          {
            "node": "IF Rollen Demo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Abteilungen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Abteilungen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Unternehmen)": {
      "main": [
        [
          {
            "node": "IF Abteilungen Demo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Unternehmen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Unternehmen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Konfiguration": {
      "main": [
        [
          {
            "node": "APQC Datei lesen",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF Unternehmen Demo?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Konfiguration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: AktivitÃ¤ten erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (AktivitÃ¤ten)": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern": {
      "main": [
        [
          {
            "node": "HTTP: Mitarbeiterbeschreibungen generieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiterbeschreibungen generieren": {
      "main": [
        [
          {
            "node": "Beschreibungen zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Beschreibungen zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten aggregieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten aggregieren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten extrahieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten extrahieren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen JSON": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Rollen zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse JSON": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Prozesse zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten JSON": {
      "main": [
        [
          {
            "node": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + AktivitÃ¤ten zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter JSON": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Alle Dateien zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessiteration vorbereiten": {
      "main": [
        [
          {
            "node": "Abteilungen iterieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen iterieren": {
      "main": [
        [
          {
            "node": "Abteilungskontext erstellen",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Abteilungskontext erstellen": {
      "main": [
        [
          {
            "node": "HTTP: Prozesse erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessantwort parsen": {
      "main": [
        [
          {
            "node": "VerfÃ¼gbare Prozesse aktualisieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VerfÃ¼gbare Prozesse aktualisieren": {
      "main": [
        [
          {
            "node": "Abteilungen iterieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prozessiteration Abschluss",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessiteration Abschluss": {
      "main": [
        [
          {
            "node": "JSON parsen (Prozesse)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kontext + Prozesse": {
      "main": [
        [
          {
            "node": "Prozessiteration vorbereiten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Unternehmen Demo?": {
      "main": [
        [
          {
            "node": "Unternehmen Demo Daten",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP: Unternehmen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen Demo Daten": {
      "main": [
        [
          {
            "node": "JSON parsen (Unternehmen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Abteilungen Demo?": {
      "main": [
        [
          {
            "node": "Abteilungen Demo Daten",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP: Abteilungen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen Demo Daten": {
      "main": [
        [
          {
            "node": "JSON parsen (Abteilungen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Rollen Demo?": {
      "main": [
        [
          {
            "node": "Rollen Demo Daten",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP: Rollen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen Demo Daten": {
      "main": [
        [
          {
            "node": "JSON parsen (Rollen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b5c1a3b9-a4cb-4d9c-a0e3-8ff948ee3a8f",
  "meta": {
    "instanceId": "978683d95f2fec9645576a18fcc11fe4832fe617757398b1b4c3c46245f2e93c"
  },
  "id": "AN4dNNt9Nu0nZo7p",
  "tags": []
}