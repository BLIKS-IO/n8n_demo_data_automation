{
  "name": "Unternehmensstruktur Generator mit LLM v35",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [1072, 8],
      "id": "767c98ed-47e9-4124-9069-2bff4b3cfa05",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "prozesse",
        "options": {
          "fileName": "prozesse.json"
        }
      },
      "id": "a4911948-6a0d-43d7-8efb-dcde557a0ea0",
      "name": "Prozesse JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [4432, -352]
    },
    {
      "parameters": {
        "jsCode": "const { prozesse } = $input.first().json;\nreturn prozesse.map(prozess => ({ json: prozess }));"
      },
      "id": "c8a7231c-e0f5-4b1d-a341-9f6bbc08b463",
      "name": "Prozesse extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4208, -352]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first()?.json ?? {};\nreturn [{ json: data }];"
      },
      "id": "3e6ce5ae-b60c-4e96-ad71-7336dd1fad2e",
      "name": "JSON parsen (Prozesse)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3088, 8]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.requestPayload }}",
        "options": {}
      },
      "id": "d513e07a-b17e-46ff-88f3-dcad199ad288",
      "name": "HTTP: Prozesse erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2192, -64]
    },
    {
      "parameters": {
        "jsCode": "const getNodeJson = (nodeName) => {\n  try {\n    const item = $(nodeName).first();\n    return item?.json ?? {};\n  } catch (error) {\n    return {};\n  }\n};\n\n// Try to get context from either Demo-Daten or JSON parsen (Rollen)\nconst demoData = getNodeJson('Demo-Daten (Alle)');\nconst apiData = getNodeJson('JSON parsen (Rollen)');\nconst contextData = demoData.unternehmen ? demoData : apiData;\n\nconst processData = getNodeJson('APQC Prozesse filtern');\nconst activityData = getNodeJson('APQC AktivitÃ¤ten filtern');\n\nreturn [{\n  json: {\n    ...contextData,\n    apqcProcesses: processData.apqcProcesses ?? [],\n    apqcActivities: activityData.apqcActivities ?? [],\n    apqcActivitiesByProcess: activityData.apqcActivitiesByProcess ?? {},\n  },\n}];\n"
      },
      "id": "13e451fb-4c04-4d52-a0ea-c39841f4e9aa",
      "name": "Kontext + Prozesse",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1296, 8]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet rows = [];\nfor (const item of items) {\n  const data = item.json;\n  if (Array.isArray(data)) {\n    rows = rows.concat(data);\n  } else if (data && Array.isArray(data.data)) {\n    rows = rows.concat(data.data);\n  } else if (data) {\n    rows.push(data);\n  }\n}\nconst processes = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID'] ?? '').trim() === '3')\n  .map((row, index) => {\n    const hierarchyId = String(row['Hierarchy ID'] ?? '').trim();\n    const pcfId = String(row['PCF ID'] ?? '').trim();\n    const rawName = row['Name (German Translation) (not verified)'] ?? row['Name (German Translation) (not veriied)'] ?? row['Name'];\n    const rawDescription = row['Element Description (German Translation) (not verified)'] ?? row['Element Description (German Translation) (not verfied)'] ?? row['Element Description'];\n    const name = typeof rawName === 'string' ? rawName.trim() : '';\n    const description = typeof rawDescription === 'string' ? rawDescription.trim() : '';\n    return {\n      source_index: index,\n      pcf_id: pcfId,\n      hierarchy_id: hierarchyId,\n      name,\n      description\n    };\n  })\n  .filter(process => process.pcf_id && process.hierarchy_id && process.name && process.hierarchy_id.split('.').length === 3);\nreturn [{ json: { apqcProcesses: processes } }];"
      },
      "id": "3c23c4c0-21ed-4b5e-a401-f7d76aeac617",
      "name": "APQC Prozesse filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [848, 104]
    },
    {
      "parameters": {
        "url": "={{ $json.apqc_data_url }}",
        "options": {}
      },
      "id": "d503f05c-f695-4fc1-a0ea-8ead5400cf0f",
      "name": "APQC Datei lesen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [624, 200]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "mitarbeiter",
        "options": {
          "fileName": "mitarbeiter.json"
        }
      },
      "id": "b48cb796-af37-4172-bd08-99174f488150",
      "name": "Mitarbeiter JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [5552, 584]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "rollen",
        "options": {
          "fileName": "rollen.json"
        }
      },
      "id": "c78c829c-1183-445e-8b5e-70e58f32e4c6",
      "name": "Rollen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [4208, 200]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "abteilungen",
        "options": {
          "fileName": "abteilungen.json"
        }
      },
      "id": "c8371f86-f15a-49a9-b19e-f28a4c9259ee",
      "name": "Abteilungen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [3984, 8]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "unternehmen",
        "options": {
          "fileName": "unternehmen.json"
        }
      },
      "id": "b43e1472-879d-4781-a8ba-257954c13377",
      "name": "Unternehmen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [3984, -184]
    },
    {
      "parameters": {
        "jsCode": "const { mitarbeiter } = $input.first().json;\nreturn mitarbeiter.map(ma => ({ json: ma }));"
      },
      "id": "a079fc64-2055-43db-8f53-0f53a6a9a72d",
      "name": "Mitarbeiter extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [5328, 584]
    },
    {
      "parameters": {
        "jsCode": "const { rollen } = $input.first().json;\nreturn rollen.map(rolle => ({ json: rolle }));"
      },
      "id": "b8fc1cd0-4dab-4a32-859b-2611b5c260a5",
      "name": "Rollen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3984, 200]
    },
    {
      "parameters": {
        "jsCode": "const { abteilungen } = $input.first().json;\nreturn abteilungen.map(abt => ({ json: abt }));"
      },
      "id": "d5e5bacd-8e84-4d1c-b164-f324d31e90ad",
      "name": "Abteilungen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3760, 8]
    },
    {
      "parameters": {
        "jsCode": "const { unternehmen } = $input.first().json;\nreturn [{ json: unternehmen }];"
      },
      "id": "d6f760ed-0678-409c-b7fa-bc934e79aa35",
      "name": "Unternehmen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3760, -184]
    },
    {
      "parameters": {
        "jsCode": "const getNodeJson = (nodeName) => {\n  try {\n    const item = $(nodeName).first();\n    return item?.json ?? {};\n  } catch (error) {\n    return {};\n  }\n};\n\nconst message = $input.first().json?.choices?.[0]?.message;\nif (!message) {\n  throw new Error('Antwort der Rollen-API fehlt oder ist leer.');\n}\n\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  prozesse = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = getNodeJson('JSON parsen (Prozesse)');\n\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart?.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\n\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\n\nconst data = JSON.parse(raw);\nlet mitarbeiter = data.mitarbeiter ?? data;\n\nmitarbeiter = mitarbeiter.map((ma, index) => ({\n  ...ma,\n  id: `emp_${String(index + 1).padStart(3, '0')}`,\n  unternehmen_id: unternehmen.id ?? '',\n  vollname: `${ma.vorname ?? ''} ${ma.nachname ?? ''}`.trim(),\n}));\n\nreturn { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\n"
      },
      "id": "e79d936e-95e7-4d5f-ae86-ea093ba8c58c",
      "name": "JSON parsen (Mitarbeiter)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3536, 176]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Antworte immer mit validem JSON im Format: {\"mitarbeiter\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle Mitarbeiter fÃ¼r ' + $json.unternehmen.name + ' (Land: ' + $json.config.land + ', Branche: ' + $json.unternehmen.branche + '). Es gibt ' + $json.rollen.length + ' Rollen. Jeder Mitarbeiter braucht: id (emp_XXX), rolle_id, abteilung_id, vorname, nachname, email, telefon, alter (25-65), gehalt_euro, eintrittsdatum (YYYY-MM-DD), vertrag (Vollzeit/Teilzeit), standort (' + $json.unternehmen.hauptsitz + '). Domain: ' + ($json.unternehmen.webseite ? $json.unternehmen.webseite.replace('www.','') : 'beispiel.de') + '. Namen zum Land passend. 85% Vollzeit.'\n    }\n  ],\n  temperature: 0.9\n}) }}",
        "options": {}
      },
      "id": "942a9d8f-d377-42d1-9de1-ca8e87e0c6a3",
      "name": "HTTP: Mitarbeiter erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3312, 176]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, config } = $('JSON parsen (Abteilungen)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst rollen = data.rollen ?? data;\nreturn { unternehmen, abteilungen, rollen, config };"
      },
      "id": "8627518e-9799-4805-bc73-3cf540aa73d7",
      "name": "JSON parsen (Rollen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [848, -280]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'rollen_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          rollen: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                titel: { type: 'string' },\n                beschreibung: { type: 'string' },\n                ebene: { type: 'string', enum: ['Entry', 'Mid', 'Senior', 'Lead', 'Executive'] },\n                anzahl_personen: { type: 'integer', minimum: 1 },\n                gehalt_min: { type: 'number' },\n                gehalt_max: { type: 'number' },\n                anforderungen: {\n                  type: 'array',\n                  items: { type: 'string' },\n                  minItems: 2\n                }\n              },\n              required: ['id', 'abteilung_id', 'titel', 'beschreibung', 'ebene', 'anzahl_personen', 'gehalt_min', 'gehalt_max', 'anforderungen']\n            }\n          }\n        },\n        required: ['rollen']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Erstelle Rollen-Definitionen als JSON, das exakt dem gelieferten Schema entspricht. Verwende nur Daten aus dem Kontext.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Definiere Rollen fÃ¼r das folgende Unternehmen und seine Abteilungen.',\n        '',\n        'Kontext (Unternehmen):',\n        JSON.stringify({\n          id: $json.unternehmen.id,\n          name: $json.unternehmen.name,\n          branche: $json.unternehmen.branche,\n          mitarbeiteranzahl: $json.unternehmen.mitarbeiteranzahl,\n          gruendungsjahr: $json.unternehmen.gruendungsjahr,\n          hauptstandort: $json.unternehmen.hauptsitz\n        }, null, 2),\n        '',\n        'Abteilungen (Input):',\n        JSON.stringify($json.abteilungen, null, 2),\n        '',\n        'Anforderungen:',\n        '- Definiere 2-6 Rollen pro Abteilung mit unterschiedlichen Verantwortungsniveaus.',\n        '- Ebene muss einer der Werte Entry/Mid/Senior/Lead/Executive sein.',\n        '- anzahl_personen pro Abteilung soll in Summe zur mitarbeiteranzahl passen.',\n        '- Setze realistische Gehaltsbereiche basierend auf Branche und Ebene.',\n        '- anforderungen muss mindestens zwei Skills enthalten.',\n        '',\n        'Gib nur JSON zurÃ¼ck, keine ErklÃ¤rungen.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.6\n}) }}",
        "options": {}
      },
      "id": "fc6b8db0-aea1-4917-bc47-b45402ec7003",
      "name": "HTTP: Rollen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [624, -280]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, config } = $('JSON parsen (Unternehmen)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_object' || part.type === 'json_schema' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst abteilungen = data.abteilungen ?? data;\nreturn { unternehmen, abteilungen, config };"
      },
      "id": "2e7bc7d9-9ffe-45bd-b9d3-0c96bbbd0cd7",
      "name": "JSON parsen (Abteilungen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, -280]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte fÃ¼r Organisationsstrukturen. Antworte immer mit validem JSON im Format: {\"abteilungen\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle eine hierarchische Abteilungsstruktur fÃ¼r: ' + $json.unternehmen.name + ' (Branche: ' + $json.unternehmen.branche + ', Mitarbeiter: ' + $json.unternehmen.mitarbeiteranzahl + '). Erstelle ' + $json.config.hierarchie_ebenen + ' Hierarchie-Ebenen. Jede Abteilung braucht: id (dept_XXX), unternehmen_id (' + $json.unternehmen.id + '), name, ebene (1-' + $json.config.hierarchie_ebenen + '), parent_id (null fÃ¼r Ebene 1), budget_euro, mitarbeiteranzahl.'\n    }\n  ],\n  temperature: 0.7\n}) }}",
        "options": {}
      },
      "id": "7c9504e7-a408-4a9f-bba9-1a06b545caff",
      "name": "HTTP: Abteilungen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [176, -280]
    },
    {
      "parameters": {
        "jsCode": "const config = $('Konfiguration').first().json;\nconst response = $input.first().json.choices[0].message.content;\nconst unternehmen = JSON.parse(response);\nreturn { unternehmen, config };"
      },
      "id": "84aae939-d3ad-48ac-bb4f-1ee48271d859",
      "name": "JSON parsen (Unternehmen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-48, -280]
    },
    {
      "parameters": {
        "jsCode": "const config = $input.first().json;\n\nif (config.use_demo_data) {\n  const unternehmen = {\n    id: '12345678',\n    name: 'EcoTech Solutions GmbH',\n    branche: 'Technologie',\n    groesse: 'Mittel',\n    mitarbeiteranzahl: 250,\n    gruendungsjahr: 2015,\n    hauptsitz: 'Berlin, Deutschland',\n    beschreibung: 'EcoTech Solutions GmbH entwickelt innovative Technologien fÃ¼r nachhaltige EnergielÃ¶sungen und Smart-City-Anwendungen.',\n    umsatz_mio: 45,\n    webseite: 'www.ecotechsolutions.de'\n  };\n\n  const abteilungen = [\n    { id: 'dept_001', unternehmen_id: '12345678', name: 'GeschÃ¤ftsfÃ¼hrung', ebene: 1, parent_id: null, beschreibung: 'Strategische Leitung', mitarbeiteranzahl: 5 },\n    { id: 'dept_002', unternehmen_id: '12345678', name: 'Vertrieb & Marketing', ebene: 2, parent_id: 'dept_001', beschreibung: 'Kundenakquise', mitarbeiteranzahl: 35 },\n    { id: 'dept_003', unternehmen_id: '12345678', name: 'Produktentwicklung', ebene: 2, parent_id: 'dept_001', beschreibung: 'Forschung und Entwicklung', mitarbeiteranzahl: 80 },\n    { id: 'dept_004', unternehmen_id: '12345678', name: 'IT & Infrastruktur', ebene: 2, parent_id: 'dept_001', beschreibung: 'Systemadministration', mitarbeiteranzahl: 15 },\n    { id: 'dept_005', unternehmen_id: '12345678', name: 'Personal & Organisation', ebene: 2, parent_id: 'dept_001', beschreibung: 'HR', mitarbeiteranzahl: 8 },\n    { id: 'dept_006', unternehmen_id: '12345678', name: 'Finanzen & Controlling', ebene: 2, parent_id: 'dept_001', beschreibung: 'Buchhaltung', mitarbeiteranzahl: 12 },\n    { id: 'dept_007', unternehmen_id: '12345678', name: 'Kundenservice', ebene: 2, parent_id: 'dept_001', beschreibung: 'Support', mitarbeiteranzahl: 25 },\n    { id: 'dept_008', unternehmen_id: '12345678', name: 'Einkauf & Logistik', ebene: 2, parent_id: 'dept_001', beschreibung: 'Beschaffung', mitarbeiteranzahl: 18 },\n    { id: 'dept_009', unternehmen_id: '12345678', name: 'QualitÃ¤tsmanagement', ebene: 2, parent_id: 'dept_001', beschreibung: 'QM', mitarbeiteranzahl: 10 },\n    { id: 'dept_010', unternehmen_id: '12345678', name: 'Recht & Compliance', ebene: 2, parent_id: 'dept_001', beschreibung: 'Legal', mitarbeiteranzahl: 6 },\n    { id: 'dept_011', unternehmen_id: '12345678', name: 'Projektmanagement', ebene: 3, parent_id: 'dept_003', beschreibung: 'Projektsteuerung', mitarbeiteranzahl: 12 },\n    { id: 'dept_012', unternehmen_id: '12345678', name: 'Vertriebsinnendienst', ebene: 3, parent_id: 'dept_002', beschreibung: 'Angebote', mitarbeiteranzahl: 8 },\n    { id: 'dept_013', unternehmen_id: '12345678', name: 'Marketing & Kommunikation', ebene: 3, parent_id: 'dept_002', beschreibung: 'Content-Marketing', mitarbeiteranzahl: 12 }\n  ];\n\n  const rollen = [\n    { id: 'role_001', abteilung_id: 'dept_001', titel: 'GeschÃ¤ftsfÃ¼hrer', beschreibung: 'Strategische UnternehmensfÃ¼hrung', ebene: 1, min_mitarbeiter: 1, max_mitarbeiter: 2 },\n    { id: 'role_002', abteilung_id: 'dept_002', titel: 'Vertriebsleiter', beschreibung: 'Leitung Vertriebsteam', ebene: 2, min_mitarbeiter: 1, max_mitarbeiter: 1 },\n    { id: 'role_003', abteilung_id: 'dept_002', titel: 'Account Manager', beschreibung: 'Kundenbetreuung', ebene: 3, min_mitarbeiter: 3, max_mitarbeiter: 5 },\n    { id: 'role_004', abteilung_id: 'dept_003', titel: 'Entwicklungsleiter', beschreibung: 'Leitung Produktentwicklung', ebene: 2, min_mitarbeiter: 1, max_mitarbeiter: 1 },\n    { id: 'role_005', abteilung_id: 'dept_003', titel: 'Software-Entwickler', beschreibung: 'Programmierung', ebene: 3, min_mitarbeiter: 8, max_mitarbeiter: 12 },\n    { id: 'role_006', abteilung_id: 'dept_004', titel: 'IT-Leiter', beschreibung: 'IT-Infrastruktur', ebene: 2, min_mitarbeiter: 1, max_mitarbeiter: 1 },\n    { id: 'role_007', abteilung_id: 'dept_004', titel: 'Systemadministrator', beschreibung: 'Server & Netzwerke', ebene: 3, min_mitarbeiter: 2, max_mitarbeiter: 3 },\n    { id: 'role_008', abteilung_id: 'dept_005', titel: 'Personalleiter', beschreibung: 'HR-Strategie', ebene: 2, min_mitarbeiter: 1, max_mitarbeiter: 1 },\n    { id: 'role_009', abteilung_id: 'dept_005', titel: 'HR-Referent', beschreibung: 'Recruiting', ebene: 3, min_mitarbeiter: 2, max_mitarbeiter: 3 },\n    { id: 'role_010', abteilung_id: 'dept_006', titel: 'KaufmÃ¤nnischer Leiter', beschreibung: 'Finanzsteuerung', ebene: 2, min_mitarbeiter: 1, max_mitarbeiter: 1 },\n    { id: 'role_011', abteilung_id: 'dept_006', titel: 'Buchhalter', beschreibung: 'Finanzbuchhaltung', ebene: 3, min_mitarbeiter: 2, max_mitarbeiter: 3 },\n    { id: 'role_012', abteilung_id: 'dept_007', titel: 'Kundenservice-Leiter', beschreibung: 'Leitung Support', ebene: 2, min_mitarbeiter: 1, max_mitarbeiter: 1 },\n    { id: 'role_013', abteilung_id: 'dept_007', titel: 'Support-Mitarbeiter', beschreibung: 'Technischer Support', ebene: 3, min_mitarbeiter: 4, max_mitarbeiter: 6 },\n    { id: 'role_014', abteilung_id: 'dept_011', titel: 'Projektmanager', beschreibung: 'Projektplanung', ebene: 3, min_mitarbeiter: 2, max_mitarbeiter: 3 },\n    { id: 'role_015', abteilung_id: 'dept_012', titel: 'Vertriebsassistent', beschreibung: 'Vertriebsinnendienst', ebene: 3, min_mitarbeiter: 2, max_mitarbeiter: 3 },\n    { id: 'role_016', abteilung_id: 'dept_013', titel: 'Marketing Manager', beschreibung: 'Marketingkampagnen', ebene: 3, min_mitarbeiter: 1, max_mitarbeiter: 2 }\n  ];\n\n  return [{ json: { unternehmen, abteilungen, rollen, config } }];\n} else {\n  return [];\n}"
      },
      "id": "b90c1370-2983-42cd-8850-f134f5453175",
      "name": "Demo-Daten (Alle)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [848, -88]
    },
    {
      "parameters": {
        "jsCode": "const config = $input.first().json;\n\nif (config.use_demo_data) {\n  return [];\n} else {\n  return [{ json: config }];\n}"
      },
      "id": "eb92adc2-9d60-47d5-8d1b-7843258e4f3d",
      "name": "Filter fÃ¼r API-Calls",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-496, -280]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte fÃ¼r Unternehmensstrukturen. Erstelle realistische fiktive Unternehmensdaten. Antworte immer mit validem JSON.'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle ein fiktives Unternehmen mit folgenden Vorgaben: Branche: ' + $json.branche + ', GrÃ¶Ãe: ' + $json.unternehmensgroesse + ', Land: ' + $json.land + ', Besonderheit: ' + $json.besonderheit + '. Erstelle ein JSON-Objekt mit den Feldern: id, name, branche, groesse, mitarbeiteranzahl, gruendungsjahr, hauptsitz, beschreibung, umsatz_mio, webseite.'\n    }\n  ],\n  temperature: 0.8\n}) }}",
        "options": {}
      },
      "id": "4efa98c4-1e85-40de-b470-ab2c2b0c52e9",
      "name": "HTTP: Unternehmen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-272, -280]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "config_branche",
              "name": "branche",
              "value": "Technologie",
              "type": "string"
            },
            {
              "id": "config_groesse",
              "name": "unternehmensgroesse",
              "value": "Mittel (100-500 Mitarbeiter)",
              "type": "string"
            },
            {
              "id": "config_land",
              "name": "land",
              "value": "Deutschland",
              "type": "string"
            },
            {
              "id": "config_besonderheit",
              "name": "besonderheit",
              "value": "Fokus auf nachhaltige LÃ¶sungen",
              "type": "string"
            },
            {
              "id": "config_hierarchie",
              "name": "hierarchie_ebenen",
              "value": 3,
              "type": "number"
            },
            {
              "id": "config_apikey",
              "name": "openai_api_key",
              "value": "key hier",
              "type": "string"
            },
            {
              "id": "config_apqc_url",
              "name": "apqc_data_url",
              "value": "https://raw.githubusercontent.com/BLIKS-IO/n8n_demo_data_automation/main/apqc.json",
              "type": "string"
            },
            {
              "id": "config_use_demo_data",
              "name": "use_demo_data",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "f642b77f-f328-4f27-ab6e-4e59cead59bf",
      "name": "Konfiguration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [-720, -88],
      "notes": "HIER ANPASSEN: Branche, GrÃ¶Ãe, Land, Besonderheiten und OpenAI API Key"
    },
    {
      "parameters": {},
      "id": "d70df3ea-2c27-47f9-943d-4c44d5bab04d",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-944, -88]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet rows = [];\nfor (const item of items) {\n  const data = item.json;\n  if (Array.isArray(data)) {\n    rows = rows.concat(data);\n  } else if (data && Array.isArray(data.data)) {\n    rows = rows.concat(data.data);\n  } else if (data) {\n    rows.push(data);\n  }\n}\nconst activities = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID'] ?? '').trim() === '4')\n  .map(row => {\n    const hierarchyId = String(row['Hierarchy ID'] ?? '').trim();\n    const parentHierarchyId = hierarchyId.includes('.') ? hierarchyId.split('.').slice(0, -1).join('.') : '';\n    return {\n      pcf_id: row['PCF ID'],\n      hierarchy_id: hierarchyId,\n      parent_hierarchy_id: parentHierarchyId,\n      name: row['Name (German Translation) (not veriied)'] ?? row['Name (German Translation) (not verified)'] ?? row['Name'] ?? '',\n      description: row['Element Description (German Translation) (not verfied)'] ?? row['Element Description (German Translation) (not verified)'] ?? row['Element Description'] ?? ''\n    };\n  });\nconst activitiesByProcess = activities.reduce((acc, activity) => {\n  const key = activity.parent_hierarchy_id || '';\n  if (!acc[key]) acc[key] = [];\n  acc[key].push(activity);\n  return acc;\n}, {});\nreturn [{ json: { apqcActivities: activities, apqcActivitiesByProcess: activitiesByProcess } }];\n"
      },
      "id": "cc240279-fe9c-4b65-a6e0-5563c092af9a",
      "name": "APQC AktivitÃ¤ten filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [848, 296]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'aktivitaeten_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          aktivitaeten: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                prozess_id: { type: 'string' },\n                prozess_name: { type: 'string' },\n                apqc_hierarchy_id: { type: 'string' },\n                name: { type: 'string' },\n                beschreibung: { type: 'string' },\n                mitarbeiter_id: { type: 'string' },\n                mitarbeiter_name: { type: 'string' },\n                begruendung: { type: 'string' },\n                zeitbedarf_stunden: { type: 'number' },\n                prioritaet: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] }\n              },\n              required: ['id', 'prozess_id', 'name', 'beschreibung', 'mitarbeiter_id', 'mitarbeiter_name']\n            }\n          }\n        },\n        required: ['aktivitaeten']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Organisationsberater. Definiere operative AktivitÃ¤ten (APQC Level 4) fÃ¼r die Prozesse und weise geeignetes Personal zu. Antworte nur im validen JSON entsprechend dem Schema.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Kontext (Unternehmen):',\n        JSON.stringify($json.unternehmen, null, 2),\n        '',\n        'Prozesse (Level 3):',\n        JSON.stringify($json.prozesse, null, 2),\n        '',\n        'APQC-AktivitÃ¤ten je Prozess (Level 4):',\n        JSON.stringify(Object.fromEntries(Object.entries($json.apqcActivitiesByProcess).slice(0, 12)), null, 2),\n        '',\n        'Mitarbeiter (Auswahl):',\n        JSON.stringify($json.mitarbeiter.slice(0, 40).map(m => ({ id: m.id, name: m.vollname, rolle_id: m.rolle_id, abteilung_id: m.abteilung_id, ebene: m.ebene, kompetenzen: m.kompetenzen ?? [] })), null, 2),\n        '',\n        'Anforderungen:',\n        '- Erstelle pro Prozess 2-5 AktivitÃ¤ten (Level 4).',\n        '- Nutze bevorzugt passende APQC-AktivitÃ¤ten (hierarchy_id) und gib sie an.',\n        '- Fehlt eine passende AktivitÃ¤t, erfinde eine realistische Alternative und setze apqc_hierarchy_id auf null.',\n        '- Ordne jeder AktivitÃ¤t den bestgeeigneten Mitarbeiter zu und begrÃ¼nde kurz.',\n        '- Beschreibungen sollen konkrete Aufgaben enthalten und ggf. Level-5-Tasks einbetten.',\n        '- Streue realistische zeitbedarf_stunden (z.B. 2-40) und PrioritÃ¤ten (hoch/mittel/niedrig).',\n        '- Gib ausschlieÃlich JSON im vereinbarten Schema zurÃ¼ck.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.6\n}) }}",
        "options": {}
      },
      "name": "HTTP: AktivitÃ¤ten erstellen",
      "id": "b9e33afa-664e-412e-a2d1-510f62a5b4a0",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3760, 392]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config } = $('JSON parsen (Mitarbeiter)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst aktivitaeten = data.aktivitaeten ?? data;\nreturn { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, aktivitaeten, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };"
      },
      "name": "JSON parsen (AktivitÃ¤ten)",
      "id": "c8e67a6a-2026-420b-9db1-9ce84864cc35",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3984, 392]
    },
    {
      "parameters": {
        "jsCode": "// Hole alle Daten aus dem vorherigen Node\nconst { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, aktivitaeten, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config } = $input.first().json;\n\n// Erstelle Lookup-Maps fÃ¼r schnellen Zugriff\nconst mitarbeiterMap = new Map(mitarbeiter.map(m => [m.id, m]));\nconst rollenMap = new Map(rollen.map(r => [r.id, r]));\nconst abteilungenMap = new Map(abteilungen.map(a => [a.id, a]));\nconst prozesseMap = new Map(prozesse.map(p => [p.pcf_id, p]));\n\n// Reichere jede AktivitÃ¤t mit vollstÃ¤ndigem Kontext an\nconst aktivitaetenMitKontext = aktivitaeten.map(aktivitaet => {\n  const mitarbeiter = mitarbeiterMap.get(aktivitaet.mitarbeiter_id) || {};\n  const rolle = rollenMap.get(mitarbeiter.rolle_id) || {};\n  const abteilung = abteilungenMap.get(mitarbeiter.abteilung_id) || {};\n  const prozess = prozesseMap.get(aktivitaet.prozess_id) || {};\n  \n  return {\n    json: {\n      ...aktivitaet,\n      mitarbeiter_kontext: {\n        id: mitarbeiter.id,\n        vollname: mitarbeiter.vollname,\n        vorname: mitarbeiter.vorname,\n        nachname: mitarbeiter.nachname,\n        rolle_id: mitarbeiter.rolle_id,\n        rolle_titel: rolle.titel,\n        rolle_ebene: rolle.ebene,\n        abteilung_id: mitarbeiter.abteilung_id,\n        abteilung_name: abteilung.name,\n        erfahrung_jahre: mitarbeiter.alter ? Math.floor((mitarbeiter.alter - 20) / 2) : 5\n      },\n      prozess_kontext: {\n        pcf_id: prozess.pcf_id,\n        name: prozess.name,\n        abteilung_name: prozess.abteilung_name\n      },\n      config: config\n    }\n  };\n});\n\nreturn aktivitaetenMitKontext;"
      },
      "name": "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern",
      "id": "0cbfa7b2-ff60-4fae-8683-cb41e57ce82e",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4208, 392]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Mitarbeiter, der seine tÃ¤glichen Aufgaben beschreibt. Schreibe in der Ich-Form, natÃ¼rlich und authentisch, wie du diese AktivitÃ¤ten ausfÃ¼hrst.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Mitarbeiter-Kontext:',\n        JSON.stringify({\n          name: $json.mitarbeiter_kontext.vollname,\n          rolle: $json.mitarbeiter_kontext.rolle_titel,\n          ebene: $json.mitarbeiter_kontext.rolle_ebene,\n          abteilung: $json.mitarbeiter_kontext.abteilung_name,\n          erfahrung_jahre: $json.mitarbeiter_kontext.erfahrung_jahre\n        }, null, 2),\n        '',\n        'AktivitÃ¤t:',\n        JSON.stringify({\n          name: $json.name,\n          prozess: $json.prozess_kontext.name,\n          technische_beschreibung: $json.beschreibung,\n          zeitbedarf_stunden: $json.zeitbedarf_stunden,\n          prioritaet: $json.prioritaet\n        }, null, 2),\n        '',\n        'Aufgabe:',\n        'Beschreibe in 2-4 SÃ¤tzen in der Ich-Form, wie du diese AktivitÃ¤t in deinem Arbeitsalltag ausfÃ¼hrst. Sei konkret und praxisnah. Beziehe dich auf typische Tools, Kollegen (ohne Namen) oder Herausforderungen. Die Beschreibung soll authentisch klingen, als wÃ¼rdest du einem neuen Kollegen erklÃ¤ren, was du machst.',\n        '',\n        'Gib das Ergebnis als JSON zurÃ¼ck: {\"beschreibung_mitarbeiter\": \"...\"}'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.8\n}) }}",
        "options": {}
      },
      "name": "HTTP: Mitarbeiterbeschreibungen generieren",
      "id": "7f047b9f-9081-4c7f-86e5-557788682c7a",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [4432, 392]
    },
    {
      "parameters": {
        "jsCode": "// Hole die ursprÃ¼ngliche AktivitÃ¤t und die API-Antwort\nconst originalAktivitaet = $input.first().json;\nconst apiResponse = $input.first().json.choices?.[0]?.message?.content;\n\nif (!apiResponse) {\n  // Falls keine Antwort, gebe OriginalaktivitÃ¤t zurÃ¼ck\n  const { mitarbeiter_kontext, prozess_kontext, config, ...aktivitaetOhneTemp } = originalAktivitaet;\n  return [{\n    json: {\n      ...aktivitaetOhneTemp,\n      beschreibung_mitarbeiter: 'Beschreibung konnte nicht generiert werden.'\n    }\n  }];\n}\n\n// Parse die API-Antwort\nlet parsedResponse;\ntry {\n  parsedResponse = typeof apiResponse === 'string' ? JSON.parse(apiResponse) : apiResponse;\n} catch (e) {\n  parsedResponse = { beschreibung_mitarbeiter: 'Fehler beim Parsen der Beschreibung.' };\n}\n\n// Entferne die temporÃ¤ren Kontextfelder und fÃ¼ge die Mitarbeiterbeschreibung hinzu\nconst { mitarbeiter_kontext, prozess_kontext, config, choices, ...aktivitaetOhneTemp } = originalAktivitaet;\n\nreturn [{\n  json: {\n    ...aktivitaetOhneTemp,\n    beschreibung_mitarbeiter: parsedResponse.beschreibung_mitarbeiter || 'Keine Beschreibung verfÃ¼gbar.'\n  }\n}];"
      },
      "name": "Beschreibungen zusammenfÃ¼hren",
      "id": "83fbd8df-f298-47c9-8877-ad3f25db9a6f",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4656, 392]
    },
    {
      "parameters": {
        "jsCode": "// Sammle alle angereicherten AktivitÃ¤ten\nconst aktivitaeten = $input.all().map(item => item.json);\n\nreturn [{ json: { aktivitaeten } }];"
      },
      "name": "AktivitÃ¤ten aggregieren",
      "id": "60deaf51-881b-4c13-9ed6-1ef6699c4f1d",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4880, 392]
    },
    {
      "parameters": {
        "jsCode": "const { aktivitaeten } = $input.first().json;\nreturn aktivitaeten.map(act => ({ json: act }));"
      },
      "name": "AktivitÃ¤ten extrahieren",
      "id": "fa9381d1-ffd0-4ab4-a7ed-081f3d4b213d",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [5104, 392]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "aktivitaeten",
        "options": {
          "fileName": "aktivitaeten.json"
        }
      },
      "name": "AktivitÃ¤ten JSON",
      "id": "a82f607d-2397-4f24-98b3-d4abe2c4bcda",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [5328, 392]
    },
    {
      "parameters": {},
      "id": "a7b2ee37-5d99-4f84-b659-e9a97f66aadb",
      "name": "Dateien zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [4208, -88]
    },
    {
      "parameters": {},
      "id": "e986b927-a7f1-4c19-8687-5576ab0d1b2b",
      "name": "Dateien + Rollen zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [4432, -64]
    },
    {
      "parameters": {},
      "id": "90b1f97c-25e9-4e3e-b898-4cc16e27330c",
      "name": "Dateien + Prozesse zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [4656, -184]
    },
    {
      "parameters": {},
      "id": "544eb316-3e3e-4593-81c0-c7a73763c5ee",
      "name": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [5552, -88]
    },
    {
      "parameters": {},
      "id": "af8b1128-5d0f-46fe-aa58-0187e967dba8",
      "name": "Alle Dateien zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [5776, 8]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [6000, 8],
      "id": "f4842662-0b6f-4688-8658-b73e6b5ea9cd",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = input;\n\nconst sortAbteilungen = (list) => {\n  return [...list]\n    .map((abteilung, index) => ({ ...abteilung, __index: index }))\n    .sort((a, b) => {\n      const levelA = Number(a.ebene ?? 999);\n      const levelB = Number(b.ebene ?? 999);\n      if (Number.isFinite(levelA) && Number.isFinite(levelB)) {\n        if (levelA !== levelB) return levelA - levelB;\n      } else if (Number.isFinite(levelA)) {\n        return -1;\n      } else if (Number.isFinite(levelB)) {\n        return 1;\n      }\n      const mitA = Number(a.mitarbeiteranzahl ?? 0);\n      const mitB = Number(b.mitarbeiteranzahl ?? 0);\n      if (mitA !== mitB) return mitB - mitA;\n      return (a.name || '').localeCompare(b.name || '');\n    });\n};\n\nconst sortedWithIndex = sortAbteilungen(abteilungen);\nconst sortedAbteilungen = sortedWithIndex.map(({ __index, ...rest }) => rest);\n\nconst globalData = $getWorkflowStaticData('global');\nglobalData.availableProcesses = Array.isArray(apqcProcesses) ? apqcProcesses.map(proc => ({ ...proc })) : [];\nglobalData.assignedProcesses = [];\nglobalData.context = { unternehmen, abteilungen: sortedAbteilungen, rollen, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\nglobalData.remainingDepartments = sortedAbteilungen.length;\n\n// DEBUG: Zeige was initialisiert wurde\nconsole.log('=== PROZESSITERATION VORBEREITEN ===');\nconsole.log('Anzahl Abteilungen:', sortedAbteilungen.length);\nconsole.log('Anzahl APQC Prozesse:', apqcProcesses.length);\nconsole.log('Erste 3 APQC Prozesse:', apqcProcesses.slice(0, 3).map(p => ({ pcf_id: p.pcf_id, name: p.name })));\nconsole.log('Global State initialisiert mit', globalData.availableProcesses.length, 'Prozessen');\n\nreturn sortedAbteilungen.map((abteilung, index) => ({ json: { abteilung, position: index } }));"
      },
      "id": "54f4461a-9d9f-48ae-825c-940cb0d02056",
      "name": "Prozessiteration vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1520, 8]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "de1cb8f5-0d13-467a-8e9a-4713f7542456",
      "name": "Abteilungen iterieren",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [1744, 8]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst abteilung = input.abteilung || {};\nconst position = input.position ?? 0;\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.context || {};\nconst availableProcesses = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\n\nconst limitProcesses = (processes, limit = 120) => {\n  if (processes.length <= limit) return processes;\n  return processes.slice(0, limit);\n};\n\nconst prozessPool = limitProcesses(availableProcesses);\nconst rollenGesamt = Array.isArray(context.rollen) ? context.rollen : [];\nconst rollen = rollenGesamt.filter(rolle => rolle.abteilung_id === abteilung.id).slice(0, 10);\n\nconst unternehmen = context.unternehmen || {};\nconst config = context.config || {};\n\n// DEBUG: PrÃ¼fe ob Prozesse verfÃ¼gbar sind\nconsole.log('=== ABTEILUNGSKONTEXT DEBUG ===');\nconsole.log('Abteilung:', abteilung.name);\nconsole.log('Available processes:', availableProcesses.length);\nconsole.log('Process pool:', prozessPool.length);\nif (prozessPool.length > 0) {\n  console.log('First 3 processes:', prozessPool.slice(0, 3).map(p => ({ pcf_id: p.pcf_id, name: p.name })));\n}\n\n// Wenn keine Prozesse verfÃ¼gbar, erstelle trotzdem einen Request (wird leere Liste zurÃ¼ckgeben)\nif (prozessPool.length === 0) {\n  console.log('WARNUNG: Keine Prozesse verfÃ¼gbar! Ãberspringe diese Abteilung.');\n  // Erstelle einen Minimal-Request der eine leere Liste anfordert\n  const emptyRequestPayload = {\n    model: 'gpt-4o-mini',\n    temperature: 0.1,\n    response_format: {\n      type: 'json_schema',\n      json_schema: {\n        name: 'prozesse_response',\n        schema: {\n          type: 'object',\n          properties: {\n            prozesse: {\n              type: 'array',\n              items: { type: 'object' }\n            }\n          },\n          required: ['prozesse']\n        }\n      }\n    },\n    messages: [\n      { role: 'system', content: 'Return empty process list' },\n      { role: 'user', content: 'No processes available, return {\"prozesse\": []}' }\n    ]\n  };\n  return [{ json: {\n    unternehmen,\n    abteilung,\n    rollen,\n    prozessPool: [],\n    config,\n    position,\n    requestPayload: emptyRequestPayload,\n    skipReason: 'no_processes_available'\n  }}];\n}\n\n// Erstelle konkrete Beispiele aus den tatsÃ¤chlich verfÃ¼gbaren Prozessen\nconst beispielProzesse = prozessPool.slice(0, 3).map(p =>\n  'pcf_id: \"' + p.pcf_id + '\", hierarchy_id: \"' + p.hierarchy_id + '\"'\n).join(' | ');\n\nconst systemPrompt = 'Du bist Organisations- und Prozessberater. WÃ¤hle fÃ¼r die Abteilung 1-2 passende APQC Level-3-Prozesse aus der bereitgestellten Liste.\\n\\n' +\n  'KRITISCH - Du MUSST die Prozess-IDs EXAKT aus der verfÃ¼gbaren Liste kopieren:\\n' +\n  '1. Suche in der \"VerfÃ¼gbare APQC-Prozesse Level 3\" Liste nach passenden Prozessen\\n' +\n  '2. Kopiere die pcf_id EXAKT aus der Liste (z.B. ' + beispielProzesse + ') - KEINE eigenen IDs erfinden!\\n' +\n  '3. Kopiere die hierarchy_id EXAKT aus der Liste - KEINE eigenen IDs erfinden!\\n' +\n  '4. Kopiere name und description EXAKT - Wort fÃ¼r Wort wie in der Liste!\\n' +\n  '5. WÃ¤hle 1-2 Prozesse (bis zu 4 wenn Abteilung sehr komplex)\\n' +\n  '6. NIEMALS eigene Prozesse erfinden - NUR aus der verfÃ¼gbaren Liste wÃ¤hlen!\\n\\n' +\n  'Die Liste enthÃ¤lt ' + prozessPool.length + ' verfÃ¼gbare Prozesse. WÃ¤hle NUR Prozesse aus dieser Liste!';\n\nconst abteilungsInfo = {\n  id: abteilung.id,\n  name: abteilung.name,\n  ebene: abteilung.ebene,\n  mitarbeiter: abteilung.mitarbeiteranzahl,\n};\n\nconst rollenInfo = rollen.map(rolle => ({\n  id: rolle.id,\n  titel: rolle.titel,\n  ebene: rolle.ebene,\n}));\n\nconst unternehmensInfo = {\n  name: unternehmen.name,\n  branche: unternehmen.branche,\n  mitarbeiteranzahl: unternehmen.mitarbeiteranzahl,\n  besonderheit: config.besonderheit || null,\n};\n\nconst userSections = [\n  'Unternehmenskontext:',\n  JSON.stringify(unternehmensInfo, null, 2),\n  '',\n  'Abteilung:',\n  JSON.stringify(abteilungsInfo, null, 2),\n  '',\n  'Rollen in dieser Abteilung (Auszug):',\n  JSON.stringify(rollenInfo, null, 2),\n  '',\n  'VerfÃ¼gbare APQC-Prozesse Level 3:',\n  JSON.stringify(prozessPool, null, 2),\n  '',\n  'Aufgabe:',\n  'WÃ¤hle 1-2 Prozesse aus (mehr nur wenn die Abteilung sehr komplex ist). Die Felder pcf_id, hierarchy_id, name und description mÃ¼ssen EXAKT aus der Liste Ã¼bernommen werden. Gib zusÃ¤tzlich eine kurze BegrÃ¼ndung (warum passt dieser Prozess) und PrioritÃ¤t (hoch/mittel/niedrig) an. Setze abteilung_id auf \"' + abteilung.id + '\" und abteilung_name auf \"' + abteilung.name + '\".',\n];\n\nconst requestPayload = {\n  model: 'gpt-4o-mini',\n  temperature: 0.1,\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'prozesse_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          prozesse: {\n            type: 'array',\n            minItems: 1,\n            maxItems: 4,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                pcf_id: { type: 'string' },\n                hierarchy_id: { type: 'string' },\n                name: { type: 'string' },\n                description: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                abteilung_name: { type: 'string' },\n                begruendung: { type: 'string' },\n                prioritaet: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] },\n              },\n              required: ['pcf_id', 'hierarchy_id', 'name', 'description', 'abteilung_id', 'abteilung_name'],\n            },\n          },\n        },\n        required: ['prozesse'],\n      },\n    },\n  },\n  messages: [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: userSections.join('\\n') },\n  ],\n};\n\nconsole.log('Request payload created, message length:', JSON.stringify(requestPayload).length);\n\nreturn [\n  {\n    json: {\n      unternehmen,\n      abteilung,\n      rollen,\n      prozessPool,\n      config,\n      position,\n      requestPayload,\n    },\n  },\n];"
      },
      "id": "5b99ddfb-d88b-4482-a1cd-a3826d67055b",
      "name": "Abteilungskontext erstellen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1968, -64]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst response = input.body ?? input;\nconst message = response.choices?.[0]?.message;\nlet raw = message?.content;\nif (!raw) {\n  throw new Error('Antwort der Prozesse-API fehlt oder ist leer.');\n}\n\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart?.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\n\nlet data;\nif (typeof raw === 'object') {\n  data = raw;\n} else {\n  try {\n    data = JSON.parse(raw);\n  } catch (error) {\n    throw new Error('Antwort konnte nicht als JSON geparst werden: ' + error.message);\n  }\n}\n\nif (!data || !Array.isArray(data.prozesse)) {\n  throw new Error('Die KI-Antwort enthÃ¤lt keine gÃ¼ltige Prozessliste.');\n}\n\n// Validierung: PrÃ¼fe ob die Prozesse aus dem verfÃ¼gbaren Pool stammen (nach PCF ID)\nconst globalData = $getWorkflowStaticData('global');\nconst available = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\nconst availableByPcfId = new Map(available.map(p => [p.pcf_id, p]));\n\nconst validatedProzesse = [];\nconst warnings = [];\n\nfor (const prozess of data.prozesse) {\n  if (!prozess.pcf_id) {\n    warnings.push(`Prozess ohne pcf_id Ã¼bersprungen: ${prozess.name || 'unbekannt'}`);\n    continue;\n  }\n\n  const originalProzess = availableByPcfId.get(prozess.pcf_id);\n\n  if (!originalProzess) {\n    warnings.push(`Prozess mit PCF ID \"${prozess.pcf_id}\" nicht im verfÃ¼gbaren Pool - AI hat vermutlich eigene ID erfunden!`);\n    continue;\n  }\n\n  // Verwende IMMER die Original-Daten aus dem Pool\n  validatedProzesse.push({\n    pcf_id: originalProzess.pcf_id,\n    hierarchy_id: originalProzess.hierarchy_id,\n    name: originalProzess.name,\n    description: originalProzess.description,\n    abteilung_id: prozess.abteilung_id,\n    abteilung_name: prozess.abteilung_name,\n    begruendung: prozess.begruendung || 'Passend fÃ¼r Abteilungsaufgaben',\n    prioritaet: prozess.prioritaet || 'mittel',\n  });\n}\n\nif (warnings.length > 0) {\n  console.log('Warnungen bei Prozess-Validierung:', warnings);\n}\n\nconst assigned = Array.isArray(globalData.assignedProcesses) ? globalData.assignedProcesses : [];\nassigned.push(...validatedProzesse);\nglobalData.assignedProcesses = assigned;\n\n// Debug-Info\nconst debug = {\n  aiRawProzesse: data.prozesse.length,\n  validatedCount: validatedProzesse.length,\n  totalAssigned: assigned.length,\n  availablePoolSize: available.length,\n};\n\nreturn [\n  {\n    json: {\n      prozesse: validatedProzesse,\n      warnings: warnings.length > 0 ? warnings : undefined,\n      debug,\n    },\n  },\n];"
      },
      "id": "a6a7e28d-65c7-422f-8222-71ea9a523908",
      "name": "Prozessantwort parsen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2416, -64]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst selected = Array.isArray(input.prozesse) ? input.prozesse : [];\nconst globalData = $getWorkflowStaticData('global');\nconst available = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\n\n// Verwende PCF ID als eindeutigen Identifier (eindeutig und wird nicht neu vergeben)\nconst selectedPcfIds = new Set(selected.map(p => p.pcf_id).filter(id => id));\nconst remaining = available.filter(proc => !selectedPcfIds.has(proc.pcf_id));\n\nglobalData.availableProcesses = remaining;\nconst currentRemaining = Number(globalData.remainingDepartments ?? 0);\nconst updatedRemaining = Math.max(0, currentRemaining - 1);\nglobalData.remainingDepartments = updatedRemaining;\n\nconst isFinal = updatedRemaining === 0;\n\n// Debug-Info\nconst debug = {\n  selectedCount: selected.length,\n  selectedPcfIds: Array.from(selectedPcfIds),\n  remainingCount: remaining.length,\n  departmentsLeft: updatedRemaining,\n  isFinal,\n};\n\nreturn [\n  {\n    json: {\n      prozesse: selected,\n      isFinal,\n      debug,\n    },\n  },\n];"
      },
      "id": "1150789f-5fb2-433f-a8e2-5c2752177055",
      "name": "VerfÃ¼gbare Prozesse aktualisieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2640, 8]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nif (!input.isFinal) {\n  return [];\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.context || {};\nconst assignedProcesses = globalData.assignedProcesses || [];\n\n// Debug: Zeige wie viele Prozesse zugewiesen wurden\nconsole.log('FINALE PROZESSLISTE:', {\n  totalProcesses: assignedProcesses.length,\n  processes: assignedProcesses,\n});\n\nconst result = {\n  unternehmen: context.unternehmen || {},\n  abteilungen: context.abteilungen || [],\n  rollen: context.rollen || [],\n  prozesse: assignedProcesses,\n  apqcProcesses: context.apqcProcesses || [],\n  apqcActivities: context.apqcActivities || [],\n  apqcActivitiesByProcess: context.apqcActivitiesByProcess || {},\n  config: context.config || {},\n};\n\n// ERST NACH dem Erstellen des Results die globalen Daten lÃ¶schen\nglobalData.availableProcesses = [];\nglobalData.assignedProcesses = [];\nglobalData.context = {};\nglobalData.remainingDepartments = 0;\n\nreturn [\n  {\n    json: result,\n  },\n];"
      },
      "id": "40dadfee-3694-4b55-8c64-edfe08948bbc",
      "name": "Prozessiteration Abschluss",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2864, 8]
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Kontext + Prozesse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse extrahieren": {
      "main": [
        [
          {
            "node": "Prozesse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Prozesse)": {
      "main": [
        [
          {
            "node": "Prozesse extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP: Mitarbeiter erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Prozesse erstellen": {
      "main": [
        [
          {
            "node": "Prozessantwort parsen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Prozesse filtern": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Datei lesen": {
      "main": [
        [
          {
            "node": "APQC Prozesse filtern",
            "type": "main",
            "index": 0
          },
          {
            "node": "APQC AktivitÃ¤ten filtern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter extrahieren": {
      "main": [
        [
          {
            "node": "Mitarbeiter JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen extrahieren": {
      "main": [
        [
          {
            "node": "Rollen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen extrahieren": {
      "main": [
        [
          {
            "node": "Abteilungen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen extrahieren": {
      "main": [
        [
          {
            "node": "Unternehmen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Mitarbeiter)": {
      "main": [
        [
          {
            "node": "Mitarbeiter extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Rollen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Abteilungen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Unternehmen extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP: AktivitÃ¤ten erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiter erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Mitarbeiter)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Rollen)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP: Rollen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Rollen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Konfiguration": {
      "main": [
        [
          {
            "node": "APQC Datei lesen",
            "type": "main",
            "index": 0
          },
          {
            "node": "Demo-Daten (Alle)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter fÃ¼r API-Calls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter fÃ¼r API-Calls": {
      "main": [
        [
          {
            "node": "HTTP: Unternehmen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Demo-Daten (Alle)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP: Unternehmen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Unternehmen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Unternehmen)": {
      "main": [
        [
          {
            "node": "HTTP: Abteilungen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Abteilungen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Abteilungen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Abteilungen)": {
      "main": [
        [
          {
            "node": "HTTP: Rollen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Konfiguration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: AktivitÃ¤ten erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (AktivitÃ¤ten)": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern": {
      "main": [
        [
          {
            "node": "HTTP: Mitarbeiterbeschreibungen generieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiterbeschreibungen generieren": {
      "main": [
        [
          {
            "node": "Beschreibungen zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Beschreibungen zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten aggregieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten aggregieren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten extrahieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten extrahieren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen JSON": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Rollen zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse JSON": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Prozesse zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten JSON": {
      "main": [
        [
          {
            "node": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + AktivitÃ¤ten zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter JSON": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Alle Dateien zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessiteration vorbereiten": {
      "main": [
        [
          {
            "node": "Abteilungen iterieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen iterieren": {
      "main": [
        [
          {
            "node": "Abteilungskontext erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungskontext erstellen": {
      "main": [
        [
          {
            "node": "HTTP: Prozesse erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessantwort parsen": {
      "main": [
        [
          {
            "node": "VerfÃ¼gbare Prozesse aktualisieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VerfÃ¼gbare Prozesse aktualisieren": {
      "main": [
        [
          {
            "node": "Abteilungen iterieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prozessiteration Abschluss",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessiteration Abschluss": {
      "main": [
        [
          {
            "node": "JSON parsen (Prozesse)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kontext + Prozesse": {
      "main": [
        [
          {
            "node": "Prozessiteration vorbereiten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b5c1a3b9-a4cb-4d9c-a0e3-8ff948ee3a8f",
  "meta": {
    "instanceId": "978683d95f2fec9645576a18fcc11fe4832fe617757398b1b4c3c46245f2e93c"
  },
  "id": "AN4dNNt9Nu0nZo7p",
  "tags": []
}
