{
  "name": "Unternehmensstruktur Generator mit LLM v45",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -5024,
        -128
      ],
      "id": "7aa1e18d-0a80-4f31-9f69-d72cc0976d65",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "prozesse",
        "options": {
          "fileName": "prozesse.json"
        }
      },
      "id": "0881b6f7-848a-42c7-8382-b8a2985e19d0",
      "name": "Prozesse JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -928,
        -1232
      ]
    },
    {
      "parameters": {
        "jsCode": "const { prozesse } = $input.first().json;\nreturn prozesse.map(prozess => ({ json: prozess }));"
      },
      "id": "16d34111-3dd2-43c8-9dcc-dd3bf7acc86b",
      "name": "Prozesse extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1152,
        -1232
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first()?.json ?? {};\nreturn [{ json: data }];"
      },
      "id": "bee061cc-d0ed-4708-9d3b-7bc42917bf58",
      "name": "JSON parsen (Prozesse)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3008,
        -624
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.requestPayload }}",
        "options": {}
      },
      "id": "e8f8a8b8-3b3a-4766-a7d3-9ed34cfd1786",
      "name": "HTTP: Prozesse erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3824,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const getNodeJson = (nodeName) => {\n  try {\n    const item = $(nodeName).first();\n    return item?.json ?? {};\n  } catch (error) {\n    console.log('Error getting node', nodeName, ':', error.message);\n    return {};\n  }\n};\n\n// Try to get context from either Demo-Daten or JSON parsen (Rollen)\nconst demoData = getNodeJson('Demo-Daten (Alle)');\nconst apiData = getNodeJson('JSON parsen (Rollen)');\nconst contextData = demoData.unternehmen ? demoData : apiData;\n\nconst processData = getNodeJson('APQC Prozesse filtern');\nconst activityData = getNodeJson('APQC AktivitÃ¤ten filtern');\n\n// DEBUG: Zeige was von den anderen Nodes kommt\nconsole.log('=== KONTEXT + PROZESSE DEBUG ===');\nconsole.log('Demo data has unternehmen:', !!demoData.unternehmen);\nconsole.log('Demo data has mitarbeiter:', demoData.mitarbeiter?.length ?? 0);\nconsole.log('API data has unternehmen:', !!apiData.unternehmen);\nconsole.log('Using demo data:', demoData.unternehmen ? true : false);\nconsole.log('Process data keys:', Object.keys(processData));\nconsole.log('APQC Processes:', processData.apqcProcesses?.length ?? 0);\nconsole.log('First 3 APQC:', processData.apqcProcesses?.slice(0, 3).map(p => ({ pcf_id: p.pcf_id, name: p.name })));\n\n// WICHTIG: Mitarbeiter und Prozesse hier NICHT durchreichen!\n// Diese werden erst NACH dem Prozess-Loop bzw. Mitarbeiter-Loop erstellt\nreturn [{\n  json: {\n    unternehmen: contextData.unternehmen,\n    abteilungen: contextData.abteilungen,\n    rollen: contextData.rollen,\n    config: contextData.config,\n    apqcProcesses: processData.apqcProcesses ?? [],\n    apqcActivities: activityData.apqcActivities ?? [],\n    apqcActivitiesByProcess: activityData.apqcActivitiesByProcess ?? {},\n  },\n}];\n"
      },
      "id": "2209b185-3b48-41c5-af8e-ed18771c1593",
      "name": "Kontext + Prozesse",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -128
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet rows = [];\nfor (const item of items) {\n  const data = item.json;\n  if (Array.isArray(data)) {\n    rows = rows.concat(data);\n  } else if (data && Array.isArray(data.data)) {\n    rows = rows.concat(data.data);\n  } else if (data) {\n    rows.push(data);\n  }\n}\nconst processes = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID'] ?? '').trim() === '3')\n  .map((row, index) => {\n    const hierarchyId = String(row['Hierarchy ID'] ?? '').trim();\n    const pcfId = String(row['PCF ID'] ?? '').trim();\n    const rawName = row['Name (German Translation) (not verified)'] ?? row['Name (German Translation) (not veriied)'] ?? row['Name'];\n    const rawDescription = row['Element Description (German Translation) (not verified)'] ?? row['Element Description (German Translation) (not verfied)'] ?? row['Element Description'];\n    const name = typeof rawName === 'string' ? rawName.trim() : '';\n    const description = typeof rawDescription === 'string' ? rawDescription.trim() : '';\n    return {\n      source_index: index,\n      pcf_id: pcfId,\n      hierarchy_id: hierarchyId,\n      name,\n      description\n    };\n  })\n  .filter(process => process.pcf_id && process.hierarchy_id && process.name && process.hierarchy_id.split('.').length === 3);\nreturn [{ json: { apqcProcesses: processes } }];"
      },
      "id": "03e6d421-2d85-4373-a43f-594e7e763df7",
      "name": "APQC Prozesse filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5248,
        64
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.apqc_data_url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "6080424b-2b0d-416c-9f58-4bab40ff971b",
      "name": "APQC Datei lesen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5472,
        160
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "mitarbeiter",
        "options": {
          "fileName": "mitarbeiter.json"
        }
      },
      "id": "66cdc321-241b-4992-a168-42ed1f647695",
      "name": "Mitarbeiter JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1152,
        416
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "rollen",
        "options": {
          "fileName": "rollen.json"
        }
      },
      "id": "f360319f-7247-470a-b516-7614cf5f05fe",
      "name": "Rollen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1152,
        -672
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "abteilungen",
        "options": {
          "fileName": "abteilungen.json"
        }
      },
      "id": "ce3677e5-47aa-47a0-b343-cab468051f13",
      "name": "Abteilungen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1376,
        -880
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "unternehmen",
        "options": {
          "fileName": "unternehmen.json"
        }
      },
      "id": "1af301c2-3e7f-4302-bf7a-8011abd30e59",
      "name": "Unternehmen JSON",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1376,
        -1072
      ]
    },
    {
      "parameters": {
        "jsCode": "const { mitarbeiter } = $input.first().json;\nreturn mitarbeiter.map(ma => ({ json: ma }));"
      },
      "id": "ab5e3d0e-b9e3-4885-b4bd-123c8674247d",
      "name": "Mitarbeiter extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        416
      ]
    },
    {
      "parameters": {
        "jsCode": "const { rollen } = $input.first().json;\nreturn rollen.map(rolle => ({ json: rolle }));"
      },
      "id": "e4f38e47-61c0-499c-bf4e-0addc3b7dff2",
      "name": "Rollen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1376,
        -672
      ]
    },
    {
      "parameters": {
        "jsCode": "const { abteilungen } = $input.first().json;\nreturn abteilungen.map(abt => ({ json: abt }));"
      },
      "id": "3fdc0cdb-ce7b-4bfb-81ff-bab957ea5fa3",
      "name": "Abteilungen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1600,
        -880
      ]
    },
    {
      "parameters": {
        "jsCode": "const { unternehmen } = $input.first().json;\nreturn [{ json: unternehmen }];"
      },
      "id": "fd51890f-c430-42a0-a6d1-ef663fb23cb5",
      "name": "Unternehmen extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1600,
        -1072
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, config } = $('JSON parsen (Abteilungen)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst rollen = data.rollen ?? data;\nreturn { unternehmen, abteilungen, rollen, config };"
      },
      "id": "efb44586-d9f3-42da-b8cc-c0a04aba131c",
      "name": "JSON parsen (Rollen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5248,
        -320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'rollen_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          rollen: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                titel: { type: 'string' },\n                beschreibung: { type: 'string' },\n                ebene: { type: 'string', enum: ['Entry', 'Mid', 'Senior', 'Lead', 'Executive'] },\n                anzahl_personen: { type: 'integer', minimum: 1 },\n                gehalt_min: { type: 'number' },\n                gehalt_max: { type: 'number' },\n                anforderungen: {\n                  type: 'array',\n                  items: { type: 'string' },\n                  minItems: 2\n                }\n              },\n              required: ['id', 'abteilung_id', 'titel', 'beschreibung', 'ebene', 'anzahl_personen', 'gehalt_min', 'gehalt_max', 'anforderungen']\n            }\n          }\n        },\n        required: ['rollen']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein HR-Experte. Erstelle Rollen-Definitionen als JSON, das exakt dem gelieferten Schema entspricht. Verwende nur Daten aus dem Kontext.'\n    },\n    {\n      role: 'user',\n      content: [\n        'Definiere Rollen fÃ¼r das folgende Unternehmen und seine Abteilungen.',\n        '',\n        'Kontext (Unternehmen):',\n        JSON.stringify({\n          id: $json.unternehmen.id,\n          name: $json.unternehmen.name,\n          branche: $json.unternehmen.branche,\n          mitarbeiteranzahl: $json.unternehmen.mitarbeiteranzahl,\n          gruendungsjahr: $json.unternehmen.gruendungsjahr,\n          hauptstandort: $json.unternehmen.hauptsitz\n        }, null, 2),\n        '',\n        'Abteilungen (Input):',\n        JSON.stringify($json.abteilungen, null, 2),\n        '',\n        'Anforderungen:',\n        '- Definiere 2-6 Rollen pro Abteilung mit unterschiedlichen Verantwortungsniveaus.',\n        '- Ebene muss einer der Werte Entry/Mid/Senior/Lead/Executive sein.',\n        '- anzahl_personen pro Abteilung soll in Summe zur mitarbeiteranzahl passen.',\n        '- Setze realistische Gehaltsbereiche basierend auf Branche und Ebene.',\n        '- anforderungen muss mindestens zwei Skills enthalten.',\n        '',\n        'Gib nur JSON zurÃ¼ck, keine ErklÃ¤rungen.'\n      ].join('\\n')\n    }\n  ],\n  temperature: 0.6\n}) }}",
        "options": {}
      },
      "id": "b2048dc3-de87-4371-8738-45c148e07e94",
      "name": "HTTP: Rollen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5472,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, config } = $('JSON parsen (Unternehmen)').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_object' || part.type === 'json_schema' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst abteilungen = data.abteilungen ?? data;\nreturn { unternehmen, abteilungen, config };"
      },
      "id": "b83330c4-2503-43a9-b66d-e7aa75099735",
      "name": "JSON parsen (Abteilungen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5696,
        -320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte fÃ¼r Organisationsstrukturen. Antworte immer mit validem JSON im Format: {\"abteilungen\": [...]}'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle eine hierarchische Abteilungsstruktur fÃ¼r: ' + $json.unternehmen.name + ' (Branche: ' + $json.unternehmen.branche + ', Mitarbeiter: ' + $json.unternehmen.mitarbeiteranzahl + '). Erstelle ' + $json.config.hierarchie_ebenen + ' Hierarchie-Ebenen. Jede Abteilung braucht: id (dept_XXX), unternehmen_id (' + $json.unternehmen.id + '), name, ebene (1-' + $json.config.hierarchie_ebenen + '), parent_id (null fÃ¼r Ebene 1), budget_euro, mitarbeiteranzahl.'\n    }\n  ],\n  temperature: 0.7\n}) }}",
        "options": {}
      },
      "id": "a19742b3-6101-4b38-a169-f790044ed196",
      "name": "HTTP: Abteilungen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5920,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "const config = $('Konfiguration').first().json;\nconst response = $input.first().json.choices[0].message.content;\nconst unternehmen = JSON.parse(response);\nreturn { unternehmen, config };"
      },
      "id": "776699d7-efa4-4fd3-916a-eeba4560fe3c",
      "name": "JSON parsen (Unternehmen)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6144,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "const config = $input.first().json;\n\nif (config.use_demo_data) {\n  const unternehmen = {\n    id: '12345678',\n    name: 'Dolce Gelato GmbH',\n    branche: 'Lebensmittel & Gastronomie',\n    groesse: 'Mittel',\n    mitarbeiteranzahl: 150,\n    gruendungsjahr: 2010,\n    hauptsitz: 'MÃ¼nchen, Deutschland',\n    beschreibung: 'Dolce Gelato GmbH stellt handgemachtes Eis aus regionalen und biologischen Zutaten her und betreibt mehrere Filialen in SÃ¼ddeutschland.',\n    umsatz_mio: 12,\n    webseite: 'www.dolcegelato.de'\n  };\n\n  const abteilungen = [\n    { id: 'dept_001', unternehmen_id: '12345678', name: 'GeschÃ¤ftsfÃ¼hrung', ebene: 1, parent_id: null, beschreibung: 'Strategische Leitung', mitarbeiteranzahl: 3 },\n    { id: 'dept_002', unternehmen_id: '12345678', name: 'Produktion', ebene: 2, parent_id: 'dept_001', beschreibung: 'Eisherstellung und QualitÃ¤tskontrolle', mitarbeiteranzahl: 45 },\n    { id: 'dept_003', unternehmen_id: '12345678', name: 'Vertrieb & Filialen', ebene: 2, parent_id: 'dept_001', beschreibung: 'Verkauf und Kundenservice', mitarbeiteranzahl: 102 }\n  ];\n\n  const rollen = [\n    { id: 'role_001', abteilung_id: 'dept_001', titel: 'GeschÃ¤ftsfÃ¼hrer', beschreibung: 'Strategische UnternehmensfÃ¼hrung', ebene: 'Executive', anzahl_personen: 1, gehalt_min: 90000, gehalt_max: 120000, anforderungen: ['FÃ¼hrungserfahrung', 'Strategisches Denken', 'Kenntnisse Lebensmittelbranche'] },\n    { id: 'role_002', abteilung_id: 'dept_002', titel: 'Produktionsleiter Eiscreme', beschreibung: 'Leitung der Eisproduktion', ebene: 'Lead', anzahl_personen: 1, gehalt_min: 55000, gehalt_max: 70000, anforderungen: ['Lebensmitteltechnik', 'QualitÃ¤tskontrolle', 'TeamfÃ¼hrung'] },\n    { id: 'role_003', abteilung_id: 'dept_003', titel: 'Filialleiter', beschreibung: 'Leitung einer Eisdiele-Filiale', ebene: 'Mid', anzahl_personen: 1, gehalt_min: 38000, gehalt_max: 48000, anforderungen: ['Kundenservice', 'Verkaufserfahrung'] }\n  ];\n\n  const mitarbeiter = [\n    { id: 'emp_001', rolle_id: 'role_001', abteilung_id: 'dept_001', vorname: 'Isabella', nachname: 'Rossi', email: 'i.rossi@dolcegelato.de', telefon: '+49 89 1234567', alter: 42, geschlecht: 'weiblich', motivation: 'hoch', intelligenz: 'hoch', gehalt_euro: 105000, eintrittsdatum: '2010-03-15', vertrag: 'Vollzeit', standort: 'MÃ¼nchen, Deutschland', unternehmen_id: '12345678', vollname: 'Isabella Rossi' },\n    { id: 'emp_002', rolle_id: 'role_002', abteilung_id: 'dept_002', vorname: 'Marco', nachname: 'Bianchi', email: 'm.bianchi@dolcegelato.de', telefon: '+49 89 2345678', alter: 35, geschlecht: 'mÃ¤nnlich', motivation: 'hoch', intelligenz: 'mittel', gehalt_euro: 62000, eintrittsdatum: '2015-06-01', vertrag: 'Vollzeit', standort: 'MÃ¼nchen, Deutschland', unternehmen_id: '12345678', vollname: 'Marco Bianchi' },\n    { id: 'emp_003', rolle_id: 'role_003', abteilung_id: 'dept_003', vorname: 'Sofia', nachname: 'Ferrari', email: 's.ferrari@dolcegelato.de', telefon: '+49 89 3456789', alter: 28, geschlecht: 'weiblich', motivation: 'mittel', intelligenz: 'mittel', gehalt_euro: 43000, eintrittsdatum: '2019-09-15', vertrag: 'Vollzeit', standort: 'MÃ¼nchen, Deutschland', unternehmen_id: '12345678', vollname: 'Sofia Ferrari' }\n  ];\n\n  const prozesse = [\n    {\n      id: 'proc_001',\n      pcf_id: '10551',\n      hierarchy_id: '4.2.1',\n      name: 'Rohstoffe und Materialien beschaffen',\n      description: 'Beschaffung von Rohmaterialien fÃ¼r die Produktion.',\n      spezifischer_name: 'Beschaffung regionaler Bio-Zutaten fÃ¼r Eis',\n      abteilung_id: 'dept_002',\n      abteilung_name: 'Produktion',\n      begruendung: 'Hochwertige regionale Zutaten sind essentiell fÃ¼r die QualitÃ¤t unseres handgemachten Eises.',\n      prioritaet: 'hoch'\n    },\n    {\n      id: 'proc_002',\n      pcf_id: '10607',\n      hierarchy_id: '4.3.1',\n      name: 'ProduktionsauftrÃ¤ge planen und terminieren',\n      description: 'Planung und Zeitplanung der ProduktionsauftrÃ¤ge.',\n      spezifischer_name: 'Produktionsplanung fÃ¼r saisonale Eissorten',\n      abteilung_id: 'dept_002',\n      abteilung_name: 'Produktion',\n      begruendung: 'Effiziente Planung sichert frische Eis-Produktion entsprechend der saisonalen Nachfrage.',\n      prioritaet: 'hoch'\n    },\n    {\n      id: 'proc_003',\n      pcf_id: '10770',\n      hierarchy_id: '5.1.1',\n      name: 'Kundenservicestrategien entwickeln',\n      description: 'Entwicklung von Strategien fÃ¼r exzellenten Kundenservice.',\n      spezifischer_name: 'Service-Konzept fÃ¼r Eisdiele-Filialen',\n      abteilung_id: 'dept_003',\n      abteilung_name: 'Vertrieb & Filialen',\n      begruendung: 'Erstklassiger Service in unseren Filialen ist entscheidend fÃ¼r Kundenzufriedenheit und Wiederkauf.',\n      prioritaet: 'hoch'\n    }\n  ];\n\n  return [{ json: { unternehmen, abteilungen, rollen, mitarbeiter, prozesse, config } }];\n} else {\n  return [];\n}"
      },
      "id": "37ca71ef-d829-463e-8944-6edf98446245",
      "name": "Demo-Daten (Alle)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5344,
        -112
      ]
    },
    {
      "parameters": {
        "jsCode": "const config = $input.first().json;\n\nif (config.use_demo_data) {\n  return [];\n} else {\n  return [{ json: config }];\n}"
      },
      "id": "c683f9f8-c880-4e74-9dbd-bdc6a759aeff",
      "name": "Filter fÃ¼r API-Calls",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6592,
        -320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ ({\n  model: 'gpt-4o-mini',\n  response_format: { type: 'json_object' },\n  messages: [\n    {\n      role: 'system',\n      content: 'Du bist ein Experte fÃ¼r Unternehmensstrukturen. Erstelle realistische fiktive Unternehmensdaten. Antworte immer mit validem JSON.'\n    },\n    {\n      role: 'user',\n      content: 'Erstelle ein fiktives Unternehmen mit folgenden Vorgaben: Branche: ' + $json.branche + ', GrÃ¶Ãe: ' + $json.unternehmensgroesse + ', Land: ' + $json.land + ', Besonderheit: ' + $json.besonderheit + '. Erstelle ein JSON-Objekt mit den Feldern: id, name, branche, groesse, mitarbeiteranzahl, gruendungsjahr, hauptsitz, beschreibung, umsatz_mio, webseite.'\n    }\n  ],\n  temperature: 0.8\n}) }}",
        "options": {}
      },
      "id": "b68d1c79-664e-439b-a210-b03328d09b49",
      "name": "HTTP: Unternehmen erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6368,
        -320
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "config_branche",
              "name": "branche",
              "value": "Lebensmittel & Gastronomie",
              "type": "string"
            },
            {
              "id": "config_groesse",
              "name": "unternehmensgroesse",
              "value": "Mittel (100-500 Mitarbeiter)",
              "type": "string"
            },
            {
              "id": "config_land",
              "name": "land",
              "value": "Deutschland",
              "type": "string"
            },
            {
              "id": "config_besonderheit",
              "name": "besonderheit",
              "value": "Handgemachtes Eis mit regionalen Zutaten",
              "type": "string"
            },
            {
              "id": "config_hierarchie",
              "name": "hierarchie_ebenen",
              "value": 3,
              "type": "number"
            },
            {
              "id": "config_apikey",
              "name": "openai_api_key",
              "value": "key",
              "type": "string"
            },
            {
              "id": "config_apqc_url",
              "name": "apqc_data_url",
              "value": "https://raw.githubusercontent.com/BLIKS-IO/n8n_demo_data_automation/main/apqc.json",
              "type": "string"
            },
            {
              "id": "config_use_demo_data",
              "name": "use_demo_data",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "config_use_demo_unternehmen",
              "name": "use_demo_unternehmen",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "config_use_demo_abteilungen",
              "name": "use_demo_abteilungen",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "config_use_demo_rollen",
              "name": "use_demo_rollen",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "config_use_demo_mitarbeiter",
              "name": "use_demo_mitarbeiter",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "config_use_demo_prozesse",
              "name": "use_demo_prozesse",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "config_use_apqc_activities",
              "name": "use_apqc_activities",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "config_use_personality_based_descriptions",
              "name": "use_personality_based_descriptions",
              "value": false,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "bf793ccf-86aa-472b-a4af-628af39fd247",
      "name": "Konfiguration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        -6816,
        -128
      ],
      "notes": "HIER ANPASSEN: Branche, GrÃ¶Ãe, Land, Besonderheiten und OpenAI API Key"
    },
    {
      "parameters": {},
      "id": "88680f6f-775c-466c-ac24-195621f42e41",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -7040,
        -128
      ]
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet rows = [];\nfor (const item of items) {\n  const data = item.json;\n  if (Array.isArray(data)) {\n    rows = rows.concat(data);\n  } else if (data && Array.isArray(data.data)) {\n    rows = rows.concat(data.data);\n  } else if (data) {\n    rows.push(data);\n  }\n}\nconst activities = rows\n  .filter(row => String(row['Hierarchy'] ?? row['Hierarchy ID'] ?? '').trim() === '4')\n  .map(row => {\n    const hierarchyId = String(row['Hierarchy ID'] ?? '').trim();\n    const parentHierarchyId = hierarchyId.includes('.') ? hierarchyId.split('.').slice(0, -1).join('.') : '';\n    return {\n      pcf_id: row['PCF ID'],\n      hierarchy_id: hierarchyId,\n      parent_hierarchy_id: parentHierarchyId,\n      name: row['Name (German Translation) (not veriied)'] ?? row['Name (German Translation) (not verified)'] ?? row['Name'] ?? '',\n      description: row['Element Description (German Translation) (not verfied)'] ?? row['Element Description (German Translation) (not verified)'] ?? row['Element Description'] ?? ''\n    };\n  });\nconst activitiesByProcess = activities.reduce((acc, activity) => {\n  const key = activity.parent_hierarchy_id || '';\n  if (!acc[key]) acc[key] = [];\n  acc[key].push(activity);\n  return acc;\n}, {});\nreturn [{ json: { apqcActivities: activities, apqcActivitiesByProcess: activitiesByProcess } }];\n"
      },
      "id": "8724e38c-12b6-4045-a440-51d05c0cd4ff",
      "name": "APQC AktivitÃ¤ten filtern",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5248,
        256
      ]
    },
    {
      "parameters": {
        "jsCode": "// Hole die ursprÃ¼ngliche AktivitÃ¤t und die API-Antwort\nconst originalAktivitaet = $input.first().json;\nconst apiResponse = $input.first().json.choices?.[0]?.message?.content;\n\nif (!apiResponse) {\n  // Falls keine Antwort, gebe OriginalaktivitÃ¤t zurÃ¼ck\n  const { mitarbeiter_kontext, prozess_kontext, config, ...aktivitaetOhneTemp } = originalAktivitaet;\n  return [{\n    json: {\n      ...aktivitaetOhneTemp,\n      beschreibung_mitarbeiter: 'Beschreibung konnte nicht generiert werden.',\n      beschreibung_qualitaet_motivation: mitarbeiter_kontext.motivation,\n      beschreibung_qualitaet_intelligenz: mitarbeiter_kontext.intelligenz,\n      beschreibung_qualitaet_gesamt: 'unbekannt'\n    }\n  }];\n}\n\n// Parse die API-Antwort\nlet parsedResponse;\ntry {\n  parsedResponse = typeof apiResponse === 'string' ? JSON.parse(apiResponse) : apiResponse;\n} catch (e) {\n  parsedResponse = { beschreibung_mitarbeiter: 'Fehler beim Parsen der Beschreibung.' };\n}\n\n// Entferne die temporÃ¤ren Kontextfelder und fÃ¼ge die Mitarbeiterbeschreibung hinzu\nconst { mitarbeiter_kontext, prozess_kontext, config, choices, ...aktivitaetOhneTemp } = originalAktivitaet;\n\n// Berechne GesamtqualitÃ¤t basierend auf Motivation und Intelligenz\nconst calculateQuality = (motivation, intelligenz) => {\n  const qualityMap = { 'hoch': 3, 'mittel': 2, 'niedrig': 1 };\n  const motivScore = qualityMap[motivation] || 2;\n  const intScore = qualityMap[intelligenz] || 2;\n  const avgScore = (motivScore + intScore) / 2;\n  \n  if (avgScore >= 2.5) return 'hoch';\n  if (avgScore >= 1.5) return 'mittel';\n  return 'niedrig';\n};\n\nreturn [{\n  json: {\n    ...aktivitaetOhneTemp,\n    beschreibung_mitarbeiter: parsedResponse.beschreibung_mitarbeiter || 'Keine Beschreibung verfÃ¼gbar.',\n    // QualitÃ¤tsfelder vom Mitarbeiter speichern\n    beschreibung_qualitaet_motivation: mitarbeiter_kontext.motivation,\n    beschreibung_qualitaet_intelligenz: mitarbeiter_kontext.intelligenz,\n    beschreibung_qualitaet_gesamt: calculateQuality(mitarbeiter_kontext.motivation, mitarbeiter_kontext.intelligenz)\n  }\n}];"
      },
      "name": "Beschreibungen zusammenfÃ¼hren",
      "id": "0eb5e8f6-78d5-423e-b9d8-a9c440487b5e",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "// Sammle alle angereicherten AktivitÃ¤ten\nconst aktivitaeten = $input.all().map(item => item.json);\n\nreturn [{ json: { aktivitaeten } }];"
      },
      "name": "AktivitÃ¤ten aggregieren",
      "id": "e444d5a0-101f-46fb-8d66-ec22d695bed9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "const { aktivitaeten } = $input.first().json;\nreturn aktivitaeten.map(act => ({ json: act }));"
      },
      "name": "AktivitÃ¤ten extrahieren",
      "id": "74b0ee5b-dff6-4e11-8e41-f7c39307d287",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        224
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "binaryPropertyName": "aktivitaeten",
        "options": {
          "fileName": "aktivitaeten.json"
        }
      },
      "name": "AktivitÃ¤ten JSON",
      "id": "8be5ab77-543c-47de-bcd9-bfe718abd64d",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        928,
        224
      ]
    },
    {
      "parameters": {},
      "id": "f8577f2f-be03-431b-bebe-7b02f4af28a1",
      "name": "Dateien zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1152,
        -976
      ]
    },
    {
      "parameters": {},
      "id": "a3daebce-f97f-4e1a-95be-dde690621a63",
      "name": "Dateien + Rollen zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -928,
        -880
      ]
    },
    {
      "parameters": {},
      "id": "5fd6f3b1-c356-47b2-861d-3920bb26980f",
      "name": "Dateien + Prozesse zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -704,
        -976
      ]
    },
    {
      "parameters": {},
      "id": "3f10c6a1-bd5f-41c6-965b-1ef0cf880cf5",
      "name": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1616,
        -576
      ]
    },
    {
      "parameters": {},
      "id": "de4ee92f-89a2-40ae-b479-4ff1ef8047f1",
      "name": "Alle Dateien zusammenfÃ¼hren",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1840,
        -480
      ]
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2064,
        -480
      ],
      "id": "13d3f536-ef14-45d6-9066-9b794fdb84ae",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\n\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = input;\n\nconst globalData = $getWorkflowStaticData('global');\n\nconsole.log('=== PROZESSITERATION VORBEREITEN ===');\nconsole.log('Config use_demo_prozesse:', config.use_demo_prozesse);\n\n// Wenn Demo-Prozesse verwendet werden sollen, springe direkt zum Abschluss\nif (config.use_demo_prozesse) {\n  console.log('=== PROZESSITERATION ÃBERSPRUNGEN (use_demo_prozesse aktiv) ===');\n  \n  // Hole Demo-Prozesse aus Demo-Daten Node\n  const getNodeJson = (nodeName) => {\n    try {\n      const item = $(nodeName).first();\n      return item?.json ?? {};\n    } catch (error) {\n      return {};\n    }\n  };\n  \n  const demoData = getNodeJson('Demo-Daten (Alle)');\n  const demoProzesse = demoData.prozesse || [];\n  \n  console.log('Demo-Prozesse gefunden:', demoProzesse.length);\n  \n  // Speichere Kontext in globalData fÃ¼r spÃ¤teren Zugriff\n  globalData.context = { unternehmen, abteilungen, rollen, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\n  globalData.assignedProcesses = demoProzesse;\n  \n  // Markiere als final fÃ¼r direkten Sprung zu \"Prozessiteration Abschluss\"\n  return [{ json: { isFinal: true } }];\n}\n\nconsole.log('=== STARTE PROZESS-ITERATION ===');\nconsole.log('Anzahl Abteilungen:', abteilungen.length);\n\nconst sortAbteilungen = (list) => {\n  return [...list]\n    .map((abteilung, index) => ({ ...abteilung, __index: index }))\n    .sort((a, b) => {\n      const levelA = Number(a.ebene ?? 999);\n      const levelB = Number(b.ebene ?? 999);\n      if (Number.isFinite(levelA) && Number.isFinite(levelB)) {\n        if (levelA !== levelB) return levelA - levelB;\n      } else if (Number.isFinite(levelA)) {\n        return -1;\n      } else if (Number.isFinite(levelB)) {\n        return 1;\n      }\n      const mitA = Number(a.mitarbeiteranzahl ?? 0);\n      const mitB = Number(b.mitarbeiteranzahl ?? 0);\n      if (mitA !== mitB) return mitB - mitA;\n      return (a.name || '').localeCompare(b.name || '');\n    });\n};\n\nconst sortedWithIndex = sortAbteilungen(abteilungen);\nconst sortedAbteilungen = sortedWithIndex.map(({ __index, ...rest }) => rest);\n\nglobalData.availableProcesses = Array.isArray(apqcProcesses) ? apqcProcesses.map(proc => ({ ...proc })) : [];\nglobalData.assignedProcesses = [];\nglobalData.context = { unternehmen, abteilungen: sortedAbteilungen, rollen, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\nglobalData.remainingDepartments = sortedAbteilungen.length;\n\nreturn sortedAbteilungen.map((abteilung, index) => ({ json: { abteilung, position: index } }));"
      },
      "id": "ee35f68f-e9f4-4a37-8147-61d4579588ad",
      "name": "Prozessiteration vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4576,
        -128
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "d85e7efd-b99e-4cc8-b630-dac30e510398",
      "name": "Abteilungen iterieren",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -4320,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst abteilung = input.abteilung || {};\nconst position = input.position ?? 0;\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.context || {};\nconst availableProcesses = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\n\nconst limitProcesses = (processes, limit = 120) => {\n  if (processes.length <= limit) return processes;\n  return processes.slice(0, limit);\n};\n\nconst prozessPool = limitProcesses(availableProcesses);\nconst rollenGesamt = Array.isArray(context.rollen) ? context.rollen : [];\nconst rollen = rollenGesamt.filter(rolle => rolle.abteilung_id === abteilung.id).slice(0, 10);\n\nconst unternehmen = context.unternehmen || {};\nconst config = context.config || {};\n\nconst systemPrompt = \"Du bist Organisations- und Prozessberater. Erstelle fÃ¼r die angegebene Abteilung 2-4 passende APQC-Prozesse auf Ebene 3. Verwende ausschlieÃlich die bereitgestellten Prozessdaten (PCF ID, Hierarchy ID, Name, Beschreibung) unverÃ¤ndert. Jeder Prozess darf nur einmal verwendet werden. Erstelle zusÃ¤tzlich fÃ¼r jeden Prozess einen branchenspezifischen Prozessnamen, der auf dem APQC-Namen basiert, aber konkret auf die Branche und TÃ¤tigkeit angepasst ist - OHNE den Unternehmensnamen zu verwenden.\";\n\nconst abteilungsInfo = {\n  id: abteilung.id,\n  name: abteilung.name,\n  ebene: abteilung.ebene,\n  mitarbeiter: abteilung.mitarbeiteranzahl,\n};\n\nconst rollenInfo = rollen.map(rolle => ({\n  id: rolle.id,\n  titel: rolle.titel,\n  ebene: rolle.ebene,\n}));\n\nconst unternehmensInfo = {\n  name: unternehmen.name,\n  branche: unternehmen.branche,\n  mitarbeiteranzahl: unternehmen.mitarbeiteranzahl,\n  besonderheit: config.besonderheit || null,\n};\n\nconst userSections = [\n  \"Unternehmenskontext:\",\n  JSON.stringify(unternehmensInfo, null, 2),\n  \"\",\n  \"Abteilung:\",\n  JSON.stringify(abteilungsInfo, null, 2),\n  \"\",\n  \"Rollen in dieser Abteilung (Auszug):\",\n  JSON.stringify(rollenInfo, null, 2),\n  \"\",\n  \"VerfÃ¼gbare APQC-Prozesse Level 3:\",\n  JSON.stringify(prozessPool, null, 2),\n  \"\",\n  \"Aufgabe:\",\n  \"WÃ¤hle 2-4 Prozesse aus der Liste aus, die bestmÃ¶glich zu den Aufgaben der Abteilung passen. Verwende die gelieferten IDs, Namen und Beschreibungen unverÃ¤ndert. Erstelle zusÃ¤tzlich fÃ¼r jeden Prozess einen spezifischer_name, der den generischen APQC-Namen konkret auf die Branche anpasst. Beispiel: Bei einem Eiscreme-Hersteller wird 'Manage Production Operations' zu 'Eiscremeherstellung' oder 'Manage Quality' zu 'QualitÃ¤tskontrolle Speiseeis'. WICHTIG: Verwende NICHT den Unternehmensnamen, sondern nur branchenspezifische Begriffe. Gib je Prozess eine kurze BegrÃ¼ndung und eine PrioritÃ¤t (hoch/mittel/niedrig) an. Antworte im JSON-Format laut Schema.\",\n];\n\nconst requestPayload = {\n  model: \"gpt-4o-mini\",\n  temperature: 0.2,\n  response_format: {\n    type: \"json_schema\",\n    json_schema: {\n      name: \"prozesse_response\",\n      schema: {\n        type: \"object\",\n        additionalProperties: false,\n        properties: {\n          prozesse: {\n            type: \"array\",\n            minItems: 1,\n            items: {\n              type: \"object\",\n              additionalProperties: false,\n              properties: {\n                pcf_id: { type: \"string\", pattern: \"^[0-9]+$\" },\n                hierarchy_id: { type: \"string\", pattern: \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+$\" },\n                name: { type: \"string\" },\n                description: { type: \"string\" },\n                spezifischer_name: { type: \"string\" },\n                abteilung_id: { type: \"string\" },\n                abteilung_name: { type: \"string\" },\n                begruendung: { type: \"string\" },\n                prioritaet: { type: \"string\", enum: [\"hoch\", \"mittel\", \"niedrig\"] },\n              },\n              required: [\"pcf_id\", \"hierarchy_id\", \"name\", \"description\", \"spezifischer_name\", \"abteilung_id\", \"abteilung_name\"],\n            },\n          },\n        },\n        required: [\"prozesse\"],\n      },\n    },\n  },\n  messages: [\n    { role: \"system\", content: systemPrompt },\n    { role: \"user\", content: userSections.join(\"\\n\") },\n  ],\n};\n\nreturn [\n  {\n    json: {\n      unternehmen,\n      abteilung,\n      rollen,\n      prozessPool,\n      config,\n      position,\n      requestPayload,\n    },\n  },\n];"
      },
      "id": "c1390136-d8eb-413a-9576-5b98e3f925ce",
      "name": "Abteilungskontext erstellen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4032,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst response = input.body ?? input;\nconst message = response.choices?.[0]?.message;\nlet raw = message?.content;\nif (!raw) {\n  throw new Error('Antwort der Prozesse-API fehlt oder ist leer.');\n}\n\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart?.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\n\nlet data;\nif (typeof raw === 'object') {\n  data = raw;\n} else {\n  try {\n    data = JSON.parse(raw);\n  } catch (error) {\n    throw new Error('Antwort konnte nicht als JSON geparst werden: ' + error.message);\n  }\n}\n\nif (!data || !Array.isArray(data.prozesse)) {\n  throw new Error('Die KI-Antwort enthÃ¤lt keine gÃ¼ltige Prozessliste.');\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst assigned = Array.isArray(globalData.assignedProcesses) ? globalData.assignedProcesses : [];\n\n// Generiere eindeutige IDs fÃ¼r die Prozesse\nconst baseIndex = assigned.length;\nconsole.log('=== PROZESSANTWORT PARSEN ===');\nconsole.log('Anzahl neue Prozesse:', data.prozesse.length);\nconsole.log('BaseIndex:', baseIndex);\n\nfor (let i = 0; i < data.prozesse.length; i++) {\n  const prozess = data.prozesse[i];\n  const prozessId = `proc_${String(baseIndex + i + 1).padStart(3, '0')}`;\n  \n  console.log(`Generiere ID fÃ¼r Prozess \"${prozess.name}\": ${prozessId}`);\n  \n  assigned.push({\n    ...prozess,\n    id: prozessId,  // Eindeutige Prozess-ID\n    abteilung_id: prozess.abteilung_id,\n    abteilung_name: prozess.abteilung_name,\n  });\n}\n\nglobalData.assignedProcesses = assigned;\nconsole.log('Gesamt Prozesse in globalData:', assigned.length);\n\n// FÃ¼ge IDs auch zu den ausgegebenen Prozessen hinzu\ndata.prozesse = data.prozesse.map((prozess, index) => ({\n  ...prozess,\n  id: `proc_${String(baseIndex + index + 1).padStart(3, '0')}`,\n}));\n\nreturn [\n  {\n    json: {\n      prozesse: data.prozesse,\n    },\n  },\n];"
      },
      "id": "cb8fd96e-51b0-4077-b36f-7b573c19b8ec",
      "name": "Prozessantwort parsen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3616,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst selected = Array.isArray(input.prozesse) ? input.prozesse : [];\nconst globalData = $getWorkflowStaticData('global');\nconst available = Array.isArray(globalData.availableProcesses) ? globalData.availableProcesses : [];\n\nconst selectedIds = new Set(selected.map(prozess => String(prozess.pcf_id || '').trim()));\nconst remaining = available.filter(proc => !selectedIds.has(String(proc.pcf_id || '').trim()));\n\nglobalData.availableProcesses = remaining;\nconst currentRemaining = Number(globalData.remainingDepartments ?? remaining.length);\nconst updatedRemaining = Math.max(0, currentRemaining - 1);\nglobalData.remainingDepartments = updatedRemaining;\n\nconst isFinal = updatedRemaining === 0;\n\nreturn [\n  {\n    json: {\n      prozesse: selected,\n      isFinal,\n    },\n  },\n];"
      },
      "id": "5299ced3-8e78-42b5-a3b3-d669327775df",
      "name": "VerfÃ¼gbare Prozesse aktualisieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3424,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nif (!input.isFinal) {\n  return [];\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.context || {};\n\nconst result = {\n  unternehmen: context.unternehmen || {},\n  abteilungen: context.abteilungen || [],\n  rollen: context.rollen || [],\n  prozesse: globalData.assignedProcesses || [],\n  apqcProcesses: context.apqcProcesses || [],\n  apqcActivities: context.apqcActivities || [],\n  apqcActivitiesByProcess: context.apqcActivitiesByProcess || {},\n  config: context.config || {},\n};\n\nconsole.log('=== PROZESSITERATION ABSCHLUSS ===');\nconsole.log('Prozesse:', result.prozesse.length);\nconsole.log('KEINE Mitarbeiter hier - werden spÃ¤ter erstellt');\n\n// DEBUG: PrÃ¼fe ob Prozesse IDs haben\nif (result.prozesse.length > 0) {\n  console.log('Erste 3 Prozesse aus globalData mit IDs:');\n  result.prozesse.slice(0, 3).forEach((p, i) => {\n    console.log(`  ${i + 1}. ${p.name} - id: ${p.id}, pcf_id: ${p.pcf_id}`);\n  });\n}\n\nglobalData.availableProcesses = [];\nglobalData.assignedProcesses = [];\nglobalData.context = {};\nglobalData.remainingDepartments = 0;\n\nreturn [\n  {\n    json: result,\n  },\n];"
      },
      "id": "895b2e07-7283-443b-9760-b0c437de8875",
      "name": "Prozessiteration Abschluss",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3232,
        -128
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  prozesse = [],\n  mitarbeiter = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = input;\n\n// Initialisiere globalData fÃ¼r AktivitÃ¤tsiteration\nconst globalData = $getWorkflowStaticData('global');\n\n// Hole Mitarbeiter aus globalData (falls dort gespeichert von Mitarbeiteriteration)\nconst mitarbeiterAusGlobal = globalData.mitarbeiterData || [];\nconst finaleMitarbeiter = mitarbeiterAusGlobal.length > 0 ? mitarbeiterAusGlobal : mitarbeiter;\n\nglobalData.assignedActivities = [];\nglobalData.activityContext = { unternehmen, abteilungen, rollen, prozesse, mitarbeiter: finaleMitarbeiter, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\nglobalData.remainingProcesses = prozesse.length;\n\n// DEBUG\nconsole.log('=== AKTIVITÃTSITERATION VORBEREITEN ===');\nconsole.log('Anzahl Prozesse:', prozesse.length);\nconsole.log('Anzahl Mitarbeiter:', finaleMitarbeiter.length);\nconsole.log('APQC Activities verfÃ¼gbar:', Object.keys(apqcActivitiesByProcess).length);\nconsole.log('Config use_apqc_activities:', config.use_apqc_activities);\n\n// DEBUG: PrÃ¼fe ob Prozesse IDs haben\nif (prozesse.length > 0) {\n  console.log('Erste 3 Prozesse mit IDs:');\n  prozesse.slice(0, 3).forEach((p, i) => {\n    console.log(`  ${i + 1}. ${p.name} - id: ${p.id}, pcf_id: ${p.pcf_id}`);\n  });\n}\n\n// Gebe die Prozessliste als ARRAY in einem einzigen Item aus (nicht als separate Items)\nreturn [{\n  json: {\n    prozesse,\n    config,\n    unternehmen,\n    abteilungen,\n    rollen,\n    mitarbeiter: finaleMitarbeiter,\n    apqcProcesses,\n    apqcActivities,\n    apqcActivitiesByProcess,\n  }\n}];"
      },
      "id": "07575c5a-9879-4619-a914-2a32fca4aefa",
      "name": "AktivitÃ¤tsiteration vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3008,
        448
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst prozesse = input.prozesse || [];\nconst config = input.config || {};\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.activityContext || {};\nconst apqcActivitiesByProcess = context.apqcActivitiesByProcess || {};\nconst useApqc = config.use_apqc_activities === true;\n\nconsole.log('=== AKTIVITÃTSKONTEXT ERSTELLEN ===');\nconsole.log('Anzahl Prozesse:', prozesse.length);\nconsole.log('Modus:', useApqc ? 'APQC' : 'KI');\nconsole.log('Config use_apqc_activities:', config.use_apqc_activities);\n\n// Wandle die Prozessliste in separate Items um, eines pro Prozess\n// FÃ¼r APQC: Hole auch die verfÃ¼gbaren APQC-AktivitÃ¤ten\n// FÃ¼r KI: Kontext mitgeben (bezieht sich auf die ERSTELLTEN Prozesse, nicht auf APQC)\nreturn prozesse.map((prozess, index) => {\n  const hierarchyId = prozess.hierarchy_id || '';\n  const availableActivities = useApqc ? (apqcActivitiesByProcess[hierarchyId] || []) : [];\n  \n  // DEBUG: PrÃ¼fe Prozess-IDs\n  console.log(`Prozess ${index + 1}/${prozesse.length}: ${prozess.name}`);\n  console.log('  - prozess.id:', prozess.id);\n  console.log('  - prozess.pcf_id:', prozess.pcf_id);\n  console.log('  - Modus:', useApqc ? `APQC (${availableActivities.length} Activities)` : 'KI generiert');\n  \n  return {\n    json: {\n      prozess,\n      position: index,\n      availableActivities,\n      config,\n      context: {\n        unternehmen: context.unternehmen || {},\n        abteilungen: context.abteilungen || [],\n        rollen: context.rollen || [],\n        mitarbeiter: context.mitarbeiter || [],\n      },\n    },\n  };\n});"
      },
      "id": "5bf27ff7-1dc7-4ba1-a666-af79e40df68b",
      "name": "AktivitÃ¤tskontext erstellen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2784,
        448
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "use_apqc_condition",
              "leftValue": "={{ $json.config.use_apqc_activities }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "71eff5bf-2444-4fbc-944d-95a3fb5e4bbb",
      "name": "IF: APQC oder KI AktivitÃ¤ten",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2560,
        448
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst prozess = input.prozess || {};\nconst availableActivities = input.availableActivities || [];\n\n// Verwende prozess.id (fÃ¼r KI-Prozesse) oder prozess.pcf_id (fÃ¼r APQC-Prozesse)\nconst prozessId = prozess.id || prozess.pcf_id || 'unknown';\n\n// Extrahiere APQC-AktivitÃ¤ten und formatiere sie mit einheitlicher Struktur\nconst aktivitaeten = availableActivities.map((activity, index) => ({\n  id: `act_${prozessId}_${String(index + 1).padStart(3, '0')}`,\n  prozess_id: prozessId,\n  prozess_hierarchy_id: prozess.hierarchy_id,\n  prozess_name: prozess.name,\n  name: activity.name,\n  beschreibung: activity.description || '',\n  apqc_hierarchy_id: activity.hierarchy_id,\n  apqc_pcf_id: activity.pcf_id || null,\n  quelle: 'APQC',\n  prioritaet: 'mittel',\n  reihenfolge: index + 1,\n  geschaetzter_zeitaufwand_stunden: null,\n}));\n\nconsole.log('APQC AktivitÃ¤ten extrahiert:', aktivitaeten.length, 'fÃ¼r Prozess', prozess.name, '(ID:', prozessId, ')');\n\nreturn [{ json: { aktivitaeten, prozess } }];"
      },
      "id": "071407bb-0e92-4f8a-a523-d8b1f01a37e4",
      "name": "APQC AktivitÃ¤ten extrahieren",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2048,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst prozess = input.prozess || {};\nconst context = input.context || {};\nconst config = input.config || {};\n\nconst systemPrompt = `Du bist ein erfahrener Prozessberater. Erstelle 3-5 operative AktivitÃ¤ten fÃ¼r den gegebenen GeschÃ¤ftsprozess.\n\nWICHTIG:\n- Die AktivitÃ¤ten mÃ¼ssen in LOGISCHER REIHENFOLGE erstellt werden (chronologisch, wie sie im Prozess ablaufen)\n- Jede AktivitÃ¤t soll konkret, messbar und auf den Unternehmenskontext zugeschnitten sein\n- BerÃ¼cksichtige die Branche, GrÃ¶Ãe und PrioritÃ¤t des Prozesses`;\n\nconst userSections = [\n  'Unternehmen:',\n  JSON.stringify(context.unternehmen, null, 2),\n  '',\n  'Prozess:',\n  JSON.stringify({\n    name: prozess.name,\n    description: prozess.description,\n    abteilung: prozess.abteilung_name,\n    prioritaet: prozess.prioritaet,\n    hierarchy_id: prozess.hierarchy_id,\n  }, null, 2),\n  '',\n  'Aufgabe:',\n  `Erstelle 3-5 AktivitÃ¤ten fÃ¼r diesen Prozess in CHRONOLOGISCHER REIHENFOLGE.\nJede AktivitÃ¤t braucht:\n- name: Klare Bezeichnung der AktivitÃ¤t\n- beschreibung: Detaillierte Beschreibung was genau getan wird\n- prioritaet: hoch/mittel/niedrig (basierend auf Wichtigkeit fÃ¼r den Prozess)\n- geschaetzter_zeitaufwand_stunden: Realistische SchÃ¤tzung\n\nDie AktivitÃ¤ten sollen den Prozessablauf von Anfang bis Ende abdecken.`,\n];\n\nconst requestPayload = {\n  model: 'gpt-4o-mini',\n  temperature: 0.4,\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'aktivitaeten_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          aktivitaeten: {\n            type: 'array',\n            minItems: 3,\n            maxItems: 5,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                name: { type: 'string' },\n                beschreibung: { type: 'string' },\n                prioritaet: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] },\n                geschaetzter_zeitaufwand_stunden: { type: 'number', minimum: 0.5, maximum: 100 },\n              },\n              required: ['name', 'beschreibung', 'prioritaet', 'geschaetzter_zeitaufwand_stunden'],\n            },\n          },\n        },\n        required: ['aktivitaeten'],\n      },\n    },\n  },\n  messages: [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: userSections.join('\\n') },\n  ],\n};\n\nreturn [{ json: { requestPayload, prozess, config } }];"
      },
      "id": "02cf74fe-ee33-4844-be99-76c33b8dd938",
      "name": "KI-AktivitÃ¤ten Prompt erstellen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1952,
        464
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.requestPayload }}",
        "options": {}
      },
      "id": "85b5a2f8-f6a7-47c7-8285-f1cca59e71e7",
      "name": "HTTP: AktivitÃ¤ten erstellen (KI)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1792,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst prozess = input.prozess || {};\n\nconst message = input.choices?.[0]?.message;\nif (!message) {\n  throw new Error('KI-Antwort fÃ¼r AktivitÃ¤ten fehlt');\n}\n\nlet raw = message.content;\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\n\nconst data = JSON.parse(raw);\n\n// Verwende prozess.id (fÃ¼r KI-Prozesse) oder prozess.pcf_id (fÃ¼r APQC-Prozesse)\nconst prozessId = prozess.id || prozess.pcf_id || 'unknown';\n\nconst aktivitaeten = (data.aktivitaeten || []).map((act, index) => ({\n  id: `act_${prozessId}_${String(index + 1).padStart(3, '0')}`,\n  prozess_id: prozessId,\n  prozess_hierarchy_id: prozess.hierarchy_id || null,\n  prozess_name: prozess.name,\n  name: act.name,\n  beschreibung: act.beschreibung || '',\n  apqc_hierarchy_id: null,\n  apqc_pcf_id: null,\n  quelle: 'KI',\n  prioritaet: act.prioritaet || 'mittel',\n  reihenfolge: index + 1,\n  geschaetzter_zeitaufwand_stunden: act.geschaetzter_zeitaufwand_stunden || null,\n}));\n\nconsole.log('KI-AktivitÃ¤ten erstellt:', aktivitaeten.length, 'fÃ¼r Prozess', prozess.name, '(ID:', prozessId, ')');\n\nreturn [{ json: { aktivitaeten, prozess } }];"
      },
      "id": "a50083b4-ff41-4638-908b-3fb8010e610b",
      "name": "KI-AktivitÃ¤ten parsen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "const globalData = $getWorkflowStaticData('global');\nconst input = $input.first()?.json ?? {};\nconst aktivitaeten = input.aktivitaeten || [];\n\n// Initialisiere Array falls nicht vorhanden\nif (!globalData.assignedActivities) {\n  globalData.assignedActivities = [];\n}\n\n// ERWEITERN statt Ã¼berschreiben\nglobalData.assignedActivities.push(...aktivitaeten);\n\nconsole.log('APQC AktivitÃ¤ten akkumuliert:', aktivitaeten.length, '| Gesamt:', globalData.assignedActivities.length);\n\nreturn [{ json: { aktivitaeten } }];"
      },
      "id": "a14993ca-e65b-48e4-9ffe-bf950517137b",
      "name": "APQC AktivitÃ¤ten zuordnen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1760,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst globalData = $getWorkflowStaticData('global');\n\nconst currentRemaining = Number(globalData.remainingProcesses ?? 0);\nconst updatedRemaining = Math.max(0, currentRemaining - 1);\nglobalData.remainingProcesses = updatedRemaining;\n\nconst isFinal = updatedRemaining === 0;\n\nconsole.log('Prozesse verbleibend:', updatedRemaining, '| isFinal:', isFinal);\n\nreturn [{ json: { isFinal, prozess: input.prozess } }];"
      },
      "id": "645c49eb-5246-445c-b6c7-2dfc696959b0",
      "name": "VerfÃ¼gbare Prozesse aktualisieren (APQC AktivitÃ¤ten)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1568,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "const globalData = $getWorkflowStaticData('global');\nconst input = $input.first()?.json ?? {};\nconst aktivitaeten = input.aktivitaeten || [];\n\n// Initialisiere Array falls nicht vorhanden\nif (!globalData.assignedActivities) {\n  globalData.assignedActivities = [];\n}\n\n// ERWEITERN statt Ã¼berschreiben\nglobalData.assignedActivities.push(...aktivitaeten);\n\nconsole.log('KI AktivitÃ¤ten akkumuliert:', aktivitaeten.length, '| Gesamt:', globalData.assignedActivities.length);\n\nreturn [{ json: { aktivitaeten } }];"
      },
      "id": "cbe1ef6b-8a53-4720-a6ed-bfca44021e55",
      "name": "KI AktivitÃ¤ten zuordnen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nif (!input.isFinal) {\n  return [];\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.activityContext || {};\nconst assignedActivities = globalData.assignedActivities || [];\n\nconsole.log('=== AKTIVITÃTSITERATION ABSCHLUSS ===');\nconsole.log('AktivitÃ¤ten gesamt:', assignedActivities.length);\n\nconst result = {\n  unternehmen: context.unternehmen || {},\n  abteilungen: context.abteilungen || [],\n  rollen: context.rollen || [],\n  prozesse: context.prozesse || [],\n  mitarbeiter: context.mitarbeiter || [],\n  aktivitaeten: assignedActivities,\n  apqcProcesses: context.apqcProcesses || [],\n  apqcActivities: context.apqcActivities || [],\n  apqcActivitiesByProcess: context.apqcActivitiesByProcess || {},\n  config: context.config || {},\n};\n\n// Cleanup\nglobalData.availableProcessesForActivities = [];\nglobalData.assignedActivities = [];\nglobalData.activityContext = {};\nglobalData.remainingProcesses = 0;\n\nreturn [{ json: result }];"
      },
      "id": "9386c8cf-fdc0-46ff-959c-d1da16da127c",
      "name": "APQC AktivitÃ¤tsiteration Abschluss",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1328,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nif (!input.isFinal) {\n  return [];\n}\n\nconst globalData = $getWorkflowStaticData('global');\nconst context = globalData.activityContext || {};\nconst assignedActivities = globalData.assignedActivities || [];\n\nconsole.log('=== AKTIVITÃTSITERATION ABSCHLUSS ===');\nconsole.log('AktivitÃ¤ten gesamt:', assignedActivities.length);\n\nconst result = {\n  unternehmen: context.unternehmen || {},\n  abteilungen: context.abteilungen || [],\n  rollen: context.rollen || [],\n  prozesse: context.prozesse || [],\n  mitarbeiter: context.mitarbeiter || [],\n  aktivitaeten: assignedActivities,\n  apqcProcesses: context.apqcProcesses || [],\n  apqcActivities: context.apqcActivities || [],\n  apqcActivitiesByProcess: context.apqcActivitiesByProcess || {},\n  config: context.config || {},\n};\n\n// Cleanup\nglobalData.availableProcessesForActivities = [];\nglobalData.assignedActivities = [];\nglobalData.activityContext = {};\nglobalData.remainingProcesses = 0;\n\nreturn [{ json: result }];"
      },
      "id": "f39a6105-8607-4bb1-813a-8c1ba3f6bab6",
      "name": "KI AktivitÃ¤tsiteration Abschluss",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1040,
        464
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "798a1b90-8035-4806-8e59-db2d00879a3f",
      "name": "Prozesse Iterieren (APQC AktivitÃ¤ten)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -2224,
        112
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "7674c6b6-2f57-4a20-bddf-edf431ff20bc",
      "name": "Prozesse Iterieren (KI AktivitÃ¤ten)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -2224,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Hole Input-Daten\nconst input = $input.first()?.json ?? {};\n\n// Extrahiere alle benÃ¶tigten Daten\nconst unternehmen = input.unternehmen || {};\nconst abteilungen = input.abteilungen || [];\nconst rollen = input.rollen || [];\nconst prozesse = input.prozesse || [];\nconst config = input.config || {};\nconst apqcProcesses = input.apqcProcesses || [];\nconst apqcActivities = input.apqcActivities || [];\nconst apqcActivitiesByProcess = input.apqcActivitiesByProcess || {};\n\nconst globalData = $getWorkflowStaticData('global');\n\nconsole.log('=== MITARBEITERITERATION VORBEREITEN ===');\nconsole.log('Unternehmen:', unternehmen.name);\nconsole.log('Abteilungen:', abteilungen.length);\nconsole.log('Rollen:', rollen.length);\nconsole.log('Config use_demo_mitarbeiter:', config.use_demo_mitarbeiter);\n\n// Wenn Demo-Mitarbeiter verwendet werden sollen, springe direkt zum Abschluss\nif (config.use_demo_mitarbeiter) {\n  console.log('=== MITARBEITERITERATION ÃBERSPRUNGEN (use_demo_mitarbeiter aktiv) ===');\n  \n  // Hole Demo-Mitarbeiter aus Demo-Daten Node\n  const getNodeJson = (nodeName) => {\n    try {\n      const item = $(nodeName).first();\n      return item?.json ?? {};\n    } catch (error) {\n      return {};\n    }\n  };\n  \n  const demoData = getNodeJson('Demo-Daten (Alle)');\n  const demoMitarbeiter = demoData.mitarbeiter || [];\n  \n  console.log('Demo-Mitarbeiter gefunden:', demoMitarbeiter.length);\n  \n  // Speichere Kontext in globalData fÃ¼r spÃ¤teren Zugriff\n  globalData.mitarbeiterContext = { unternehmen, abteilungen, rollen, prozesse, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\n  globalData.alleMitarbeiter = demoMitarbeiter;\n  \n  // Markiere als final fÃ¼r direkten Sprung zu \"Mitarbeiteriteration Abschluss\"\n  return [{ json: { isFinal: true } }];\n}\n\n// Initialisiere globalData fÃ¼r Mitarbeiter-Sammlung\nglobalData.alleMitarbeiter = [];\nglobalData.mitarbeiterContext = { unternehmen, abteilungen, rollen, prozesse, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };\n\nconsole.log('=== STARTE MITARBEITER-ITERATION ===');\nconsole.log('Anzahl Rollen:', rollen.length);\n\n// Erstelle Lookup-Map fÃ¼r Abteilungen\nconst abteilungMap = new Map(abteilungen.map(a => [a.id, a]));\n\n// Iteriere Ã¼ber jede Rolle und erstelle entsprechende Mitarbeiter\nreturn rollen.map((rolle, index) => {\n  const abteilung = abteilungMap.get(rolle.abteilung_id) || {};\n  console.log(`Rolle ${index + 1}/${rollen.length}: ${rolle.titel} (${rolle.anzahl_personen} Mitarbeiter)`);\n  return {\n    json: {\n      rolle,\n      abteilung,\n      unternehmen,\n      config,\n      position: index,\n    },\n  };\n});"
      },
      "id": "d3864eeb-3c14-4e4c-83b2-ce95a384f43e",
      "name": "Mitarbeiteriteration vorbereiten",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2832,
        -240
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "b71affcd-9b05-422e-a7da-0a4fb67e6a51",
      "name": "Rollen iterieren (Mitarbeiter-Erstellung)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -2640,
        -112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  model: 'gpt-4o-mini',\n  response_format: {\n    type: 'json_schema',\n    json_schema: {\n      name: 'mitarbeiter_response',\n      schema: {\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n          mitarbeiter: {\n            type: 'array',\n            minItems: 1,\n            items: {\n              type: 'object',\n              additionalProperties: false,\n              properties: {\n                id: { type: 'string' },\n                rolle_id: { type: 'string' },\n                abteilung_id: { type: 'string' },\n                vorname: { type: 'string' },\n                nachname: { type: 'string' },\n                email: { type: 'string' },\n                telefon: { type: 'string' },\n                alter: { type: 'integer', minimum: 25, maximum: 65 },\n                geschlecht: { type: 'string', enum: ['mÃ¤nnlich', 'weiblich', 'divers'] },\n                motivation: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] },\n                intelligenz: { type: 'string', enum: ['hoch', 'mittel', 'niedrig'] },\n                gehalt_euro: { type: 'number' },\n                eintrittsdatum: { type: 'string' },\n                vertrag: { type: 'string', enum: ['Vollzeit', 'Teilzeit'] },\n                standort: { type: 'string' }\n              },\n              required: ['id', 'rolle_id', 'abteilung_id', 'vorname', 'nachname', 'email', 'telefon', 'alter', 'geschlecht', 'motivation', 'intelligenz', 'gehalt_euro', 'eintrittsdatum', 'vertrag', 'standort']\n            }\n          }\n        },\n        required: ['mitarbeiter']\n      }\n    }\n  },\n  messages: [\n    {\n      role: 'system',\n      content: `Du bist ein HR-Experte. Erstelle realistische Mitarbeiterprofile als JSON, das exakt dem gelieferten Schema entspricht.\n\nWICHTIG FÃR NAMENSVARIABILITÃT:\n- Verwende eine groÃe Vielfalt an Vor- und Nachnamen\n- KEINE Namen dÃ¼rfen sich wiederholen oder Ã¤hnlich sein\n- WÃ¤hle aus mindestens 50+ verschiedenen Vornamen\n- WÃ¤hle aus mindestens 100+ verschiedenen Nachnamen\n- Kombinationen mÃ¼ssen einzigartig sein\n- Namen sollen zur Kultur des Landes passen`\n    },\n    {\n      role: 'user',\n      content: `Erstelle ${$json.rolle.anzahl_personen} VÃLLIG UNTERSCHIEDLICHE Mitarbeiter fÃ¼r die Rolle \"${$json.rolle.titel}\" (${$json.rolle.id}) in der Abteilung \"${$json.abteilung.name}\" (${$json.abteilung.id}) bei ${$json.unternehmen.name} (Land: ${$json.config.land}, Branche: ${$json.unternehmen.branche}).\n\nROLLENINFO:\n- Titel: ${$json.rolle.titel}\n- Beschreibung: ${$json.rolle.beschreibung}\n- Ebene: ${$json.rolle.ebene}\n- Gehaltsspanne: ${$json.rolle.gehalt_min}-${$json.rolle.gehalt_max} EUR\n- Anzahl zu erstellen: ${$json.rolle.anzahl_personen}\n\nWICHTIGE ANFORDERUNGEN:\n- id: emp_XXX (fortlaufend)\n- rolle_id: ${$json.rolle.id}\n- abteilung_id: ${$json.abteilung.id}\n\nNAMEN (EXTREM WICHTIG!):\n- Verwende VÃLLIG UNTERSCHIEDLICHE Vornamen fÃ¼r jeden Mitarbeiter\n- Verwende VÃLLIG UNTERSCHIEDLICHE Nachnamen fÃ¼r jeden Mitarbeiter\n- KEINE Wiederholungen oder Ã¤hnliche Namen erlaubt\n- Namen mÃ¼ssen zum Land ${$json.config.land} passen\n- Bei ${$json.rolle.anzahl_personen} Personen: ${$json.rolle.anzahl_personen} komplett verschiedene Namen!\n\nWEITERE FELDER:\n- email: vorname.nachname@${$json.unternehmen.webseite ? $json.unternehmen.webseite.replace('www.','') : 'beispiel.de'}\n- telefon: realistische lokale Nummer\n- alter: passend zur Ebene ${$json.rolle.ebene} (Entry=25-30, Mid=30-40, Senior=40-50, Lead=45-55, Executive=50-65)\n- geschlecht: Realistische Verteilung (ca. 50% mÃ¤nnlich, 45% weiblich, 5% divers)\n- motivation: Normalverteilt (60% mittel, 25% hoch, 15% niedrig)\n- intelligenz: Normalverteilt (60% mittel, 30% hoch, 10% niedrig)\n- gehalt_euro: zwischen ${$json.rolle.gehalt_min} und ${$json.rolle.gehalt_max} EUR, variierend nach Erfahrung\n- eintrittsdatum: YYYY-MM-DD zwischen 2015 und 2024\n- vertrag: 85% Vollzeit, 15% Teilzeit\n- standort: ${$json.unternehmen.hauptsitz}`\n    }\n  ],\n  temperature: 1.0\n}) }}",
        "options": {}
      },
      "id": "102624cc-4faa-438a-ad04-97bb63cbe610",
      "name": "HTTP: Mitarbeiter erstellen",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2384,
        -128
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nif (!input.isFinal) {\n  return [];\n}\n\nconst globalData = $getWorkflowStaticData('global');\n\n// PrÃ¼fe ob Demo-Daten direkt Ã¼bergeben wurden (von Output 1 der Vorbereitung)\nif (input.mitarbeiter && Array.isArray(input.mitarbeiter) && input.mitarbeiter.length > 0) {\n  console.log('=== MITARBEITERITERATION ABSCHLUSS (DEMO-DATEN) ===');\n  console.log('Demo-Mitarbeiter:', input.mitarbeiter.length);\n  \n  const result = {\n    unternehmen: input.unternehmen || {},\n    abteilungen: input.abteilungen || [],\n    rollen: input.rollen || [],\n    prozesse: input.prozesse || [],\n    mitarbeiter: input.mitarbeiter,\n    apqcProcesses: input.apqcProcesses || [],\n    apqcActivities: input.apqcActivities || [],\n    apqcActivitiesByProcess: input.apqcActivitiesByProcess || {},\n    config: input.config || {},\n  };\n  \n  // Speichere Mitarbeiter in globalData fÃ¼r spÃ¤tere Verwendung\n  globalData.mitarbeiterData = result.mitarbeiter;\n  \n  return [{ json: result }];\n}\n\n// Normale Verarbeitung: Sammle Mitarbeiter aus dem Loop\nconst mitarbeiterContext = globalData.mitarbeiterContext || {};\nconst alleMitarbeiter = globalData.alleMitarbeiter || [];\n\nconst result = {\n  unternehmen: mitarbeiterContext.unternehmen || {},\n  abteilungen: mitarbeiterContext.abteilungen || [],\n  rollen: mitarbeiterContext.rollen || [],\n  prozesse: mitarbeiterContext.prozesse || [],\n  mitarbeiter: alleMitarbeiter,\n  apqcProcesses: mitarbeiterContext.apqcProcesses || [],\n  apqcActivities: mitarbeiterContext.apqcActivities || [],\n  apqcActivitiesByProcess: mitarbeiterContext.apqcActivitiesByProcess || {},\n  config: mitarbeiterContext.config || {},\n};\n\nconsole.log('=== MITARBEITERITERATION ABSCHLUSS (API-ERSTELLT) ===');\nconsole.log('Mitarbeiter gesamt:', result.mitarbeiter.length);\nconsole.log('Rollen gesamt:', result.rollen.length);\n\n// WICHTIG: Speichere Mitarbeiter in globalData fÃ¼r spÃ¤tere Verwendung in AktivitÃ¤tsiteration\nglobalData.mitarbeiterData = result.mitarbeiter;\n\n// Cleanup Mitarbeiter-spezifisches globalData\nglobalData.alleMitarbeiter = [];\nglobalData.mitarbeiterContext = {};\n\nreturn [\n  {\n    json: result,\n  },\n];"
      },
      "id": "10553024-91dd-4d70-9467-08a3b152f70c",
      "name": "Mitarbeiteriteration Abschluss",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1776,
        -240
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "b63c13b1-0882-4ebc-b918-23755b4f8bb8",
      "name": "AktivitÃ¤ten iterieren (Beschreibungs-Erstellung)",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -592,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first()?.json ?? {};\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  prozesse = [],\n  mitarbeiter = [],\n  aktivitaeten = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = input;\n\n// Erstelle Lookup-Maps\nconst prozessMap = new Map(prozesse.map(p => [p.pcf_id, p]));\nconst abteilungMap = new Map(abteilungen.map(a => [a.id, a]));\nconst rollenMap = new Map(rollen.map(r => [r.id, r]));\n\n// Gruppiere Mitarbeiter nach Abteilung\nconst mitarbeiterByAbteilung = new Map();\nmitarbeiter.forEach(ma => {\n  const abtId = ma.abteilung_id;\n  if (!mitarbeiterByAbteilung.has(abtId)) {\n    mitarbeiterByAbteilung.set(abtId, []);\n  }\n  mitarbeiterByAbteilung.get(abtId).push(ma);\n});\n\nconsole.log('=== MITARBEITER-ZUORDNUNG ===');\nconsole.log('AktivitÃ¤ten zu verarbeiten:', aktivitaeten.length);\nconsole.log('Mitarbeiter verfÃ¼gbar:', mitarbeiter.length);\n\n// Ordne jedem AktivitÃ¤t einen passenden Mitarbeiter zu\nconst aktivitaetenMitMitarbeiter = aktivitaeten.map((aktivitaet, index) => {\n  // Finde den Prozess der AktivitÃ¤t\n  const prozess = prozessMap.get(aktivitaet.prozess_id);\n  if (!prozess) {\n    console.log('WARNUNG: Prozess nicht gefunden fÃ¼r AktivitÃ¤t:', aktivitaet.id);\n    return { ...aktivitaet, mitarbeiter_id: null };\n  }\n  \n  // Finde die Abteilung des Prozesses\n  const abteilungId = prozess.abteilung_id;\n  const verfuegbareMitarbeiter = mitarbeiterByAbteilung.get(abteilungId) || [];\n  \n  if (verfuegbareMitarbeiter.length === 0) {\n    console.log('WARNUNG: Keine Mitarbeiter in Abteilung', abteilungId, 'fÃ¼r AktivitÃ¤t:', aktivitaet.id);\n    return { ...aktivitaet, mitarbeiter_id: null };\n  }\n  \n  // WÃ¤hle einen passenden Mitarbeiter\n  // Strategie: Rollenwahl basierend auf AktivitÃ¤tsprioritÃ¤t\n  // - Hohe PrioritÃ¤t â Senior/Manager-Rollen\n  // - Mittlere/Niedrige â Junior/Mid-Level-Rollen\n  let ausgewaehlterMitarbeiter;\n  \n  if (aktivitaet.prioritaet === 'hoch') {\n    // Bevorzuge hÃ¶here Rollen (Executive, Manager)\n    ausgewaehlterMitarbeiter = verfuegbareMitarbeiter.find(ma => {\n      const rolle = rollenMap.get(ma.rolle_id);\n      return rolle && (rolle.ebene === 'Executive' || rolle.ebene === 'Manager');\n    }) || verfuegbareMitarbeiter[0];\n  } else {\n    // WÃ¤hle basierend auf Index (Round-Robin fÃ¼r Verteilung)\n    const mitarbeiterIndex = index % verfuegbareMitarbeiter.length;\n    ausgewaehlterMitarbeiter = verfuegbareMitarbeiter[mitarbeiterIndex];\n  }\n  \n  return {\n    ...aktivitaet,\n    mitarbeiter_id: ausgewaehlterMitarbeiter.id,\n  };\n});\n\nconsole.log('AktivitÃ¤ten mit Mitarbeiter-Zuordnung:', aktivitaetenMitMitarbeiter.length);\n\nreturn [{\n  json: {\n    unternehmen,\n    abteilungen,\n    rollen,\n    prozesse,\n    mitarbeiter,\n    aktivitaeten: aktivitaetenMitMitarbeiter,\n    apqcProcesses,\n    apqcActivities,\n    apqcActivitiesByProcess,\n    config,\n  },\n}];"
      },
      "name": "Mitarbeiter zu AktivitÃ¤ten zuordnen",
      "id": "9f5b8de2-7f02-4a13-b3dd-550b358e06fa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        -16
      ]
    },
    {
      "parameters": {
        "jsCode": "const message = $input.first().json.choices[0].message;\nconst { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config } = $('Mitarbeiter Antwort Parsen').first().json;\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart && jsonPart.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\nconst data = JSON.parse(raw);\nconst aktivitaeten = data.aktivitaeten ?? data;\nreturn { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, aktivitaeten, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config };"
      },
      "name": "JSON parsen (AktivitÃ¤ten)",
      "id": "01940436-4baf-4d07-90c5-2af1a87d3a17",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Hole alle Daten aus dem vorherigen Node\nconst { unternehmen, abteilungen, rollen, prozesse, mitarbeiter, aktivitaeten, apqcProcesses, apqcActivities, apqcActivitiesByProcess, config } = $input.first().json;\n\n// Erstelle Lookup-Maps fÃ¼r schnellen Zugriff\nconst mitarbeiterMap = new Map(mitarbeiter.map(m => [m.id, m]));\nconst rollenMap = new Map(rollen.map(r => [r.id, r]));\nconst abteilungenMap = new Map(abteilungen.map(a => [a.id, a]));\nconst prozesseMap = new Map(prozesse.map(p => [p.pcf_id, p]));\n\n// Reichere jede AktivitÃ¤t mit vollstÃ¤ndigem Kontext an\nconst aktivitaetenMitKontext = aktivitaeten.map(aktivitaet => {\n  const mitarbeiter = mitarbeiterMap.get(aktivitaet.mitarbeiter_id) || {};\n  const rolle = rollenMap.get(mitarbeiter.rolle_id) || {};\n  const abteilung = abteilungenMap.get(mitarbeiter.abteilung_id) || {};\n  const prozess = prozesseMap.get(aktivitaet.prozess_id) || {};\n  \n  return {\n    json: {\n      ...aktivitaet,\n      mitarbeiter_kontext: {\n        id: mitarbeiter.id,\n        vollname: mitarbeiter.vollname,\n        vorname: mitarbeiter.vorname,\n        nachname: mitarbeiter.nachname,\n        rolle_id: mitarbeiter.rolle_id,\n        rolle_titel: rolle.titel,\n        rolle_ebene: rolle.ebene,\n        abteilung_id: mitarbeiter.abteilung_id,\n        abteilung_name: abteilung.name,\n        erfahrung_jahre: mitarbeiter.alter ? Math.floor((mitarbeiter.alter - 20) / 2) : 5,\n        // PersÃ¶nlichkeitsfelder\n        geschlecht: mitarbeiter.geschlecht || 'divers',\n        motivation: mitarbeiter.motivation || 'mittel',\n        intelligenz: mitarbeiter.intelligenz || 'mittel'\n      },\n      prozess_kontext: {\n        pcf_id: prozess.pcf_id,\n        name: prozess.name,\n        abteilung_name: prozess.abteilung_name\n      },\n      config: config\n    }\n  };\n});\n\nreturn aktivitaetenMitKontext;"
      },
      "name": "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern",
      "id": "0e7f42c6-d69e-4cb7-bebf-158eb96c3612",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        -32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.config.openai_api_key }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ (() => {\n  const mitarbeiterKontext = $json.mitarbeiter_kontext;\n  const prozessKontext = $json.prozess_kontext;\n  const aktivitaet = $json;\n  const config = $json.config;\n  \n  // Base System Prompt\n  let systemPrompt = `Du bist ${mitarbeiterKontext.vollname}, ${mitarbeiterKontext.rolle_titel} in der Abteilung ${mitarbeiterKontext.abteilung_name}. Du beschreibst deine tÃ¤gliche Arbeit aus der Ich-Perspektive.`;\n  \n  let qualityInstruction = '';\n  let temperature = 0.8;\n  \n  // PersÃ¶nlichkeitsbasierte Anpassung\n  if (config.use_personality_based_descriptions) {\n    const motivation = mitarbeiterKontext.motivation || 'mittel';\n    const intelligenz = mitarbeiterKontext.intelligenz || 'mittel';\n    \n    // QualitÃ¤tslevel berechnen\n    const qualityMap = { 'hoch': 3, 'mittel': 2, 'niedrig': 1 };\n    const motivScore = qualityMap[motivation] || 2;\n    const intScore = qualityMap[intelligenz] || 2;\n    const avgScore = (motivScore + intScore) / 2;\n    \n    if (avgScore >= 2.5) {\n      // Hoch: Detailliert, kritisch, lang\n      qualityInstruction = `\\n\\nQUALITÃT: Du bist hochmotiviert und intelligent. Deine Beschreibung soll:\n- Sehr detailliert sein (mindestens 150 WÃ¶rter)\n- Kritische Gedanken und Herausforderungen benennen\n- Konkrete Beispiele und Zahlen enthalten\n- Optimierungspotenziale aufzeigen\n- Professionell und prÃ¤zise formuliert sein`;\n      temperature = 0.4;\n    } else if (avgScore >= 1.5) {\n      // Mittel: Standard\n      qualityInstruction = `\\n\\nQUALITÃT: Du bist durchschnittlich motiviert. Deine Beschreibung soll:\n- Mittlere Detailtiefe haben (80-120 WÃ¶rter)\n- Die wichtigsten Schritte beschreiben\n- Grundlegende Informationen enthalten`;\n      temperature = 0.6;\n    } else {\n      // Niedrig: Kurz, oberflÃ¤chlich\n      qualityInstruction = `\\n\\nQUALITÃT: Du bist wenig motiviert und beschreibst nur das NÃ¶tigste. Deine Beschreibung soll:\n- Sehr kurz sein (30-60 WÃ¶rter)\n- Nur die absoluten Basics erwÃ¤hnen\n- Einfache Sprache verwenden\n- Keine Details oder Optimierungen nennen`;\n      temperature = 0.7;\n    }\n    \n    systemPrompt += qualityInstruction;\n  } else {\n    // Standard: Gute, genaue Beschreibung\n    systemPrompt += `\\n\\nDeine Beschreibung soll detailliert, genau und professionell sein. ErklÃ¤re die AktivitÃ¤t so, als wÃ¼rdest du einem neuen Kollegen erklÃ¤ren, wie du sie durchfÃ¼hrst.`;\n    temperature = 0.8;\n  }\n  \n  // User Prompt\n  const userPrompt = [\n    'Beschreibe folgende AktivitÃ¤t aus deiner Perspektive (Ich-Form):',\n    '',\n    `AktivitÃ¤t: ${aktivitaet.name}`,\n    `Prozess: ${prozessKontext.name}`,\n    `Abteilung: ${prozessKontext.abteilung_name}`,\n    '',\n    aktivitaet.beschreibung ? `Kontext: ${aktivitaet.beschreibung}` : '',\n    '',\n    'Beschreibe wie DU diese AktivitÃ¤t durchfÃ¼hrst, welche Tools/Methoden du nutzt, und was die grÃ¶Ãten Herausforderungen sind.',\n    '',\n    'Gib das Ergebnis als JSON zurÃ¼ck: {\"beschreibung_mitarbeiter\": \"...\"}'\n  ].filter(line => line !== '').join('\\n');\n  \n  return {\n    model: 'gpt-4o-mini',\n    temperature: temperature,\n    response_format: { type: 'json_object' },\n    messages: [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ]\n  };\n})() }}",
        "options": {}
      },
      "name": "HTTP: Mitarbeiterbeschreibungen generieren",
      "id": "9301fdb8-8f41-4675-9d3e-1e9f149ca3c5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -96,
        -32
      ]
    },
    {
      "parameters": {
        "jsCode": "const getNodeJson = (nodeName) => {\n  try {\n    const item = $(nodeName).first();\n    return item?.json ?? {};\n  } catch (error) {\n    return {};\n  }\n};\n\nconst prozessData = getNodeJson('JSON parsen (Prozesse)');\nconst {\n  unternehmen = {},\n  abteilungen = [],\n  rollen = [],\n  prozesse = [],\n  mitarbeiter: existingMitarbeiter = [],\n  apqcProcesses = [],\n  apqcActivities = [],\n  apqcActivitiesByProcess = {},\n  config = {},\n} = prozessData;\n\n// Wenn bereits Mitarbeiter vorhanden sind (Demo-Daten), diese verwenden\nif (existingMitarbeiter && existingMitarbeiter.length > 0) {\n  console.log('=== DEMO-MITARBEITER VERWENDEN ===');\n  console.log('Anzahl:', existingMitarbeiter.length);\n  return [{ json: { mitarbeiter: existingMitarbeiter, isFinal: true } }];\n}\n\n// Sonst API Response parsen\nconst message = $input.first().json?.choices?.[0]?.message;\nif (!message) {\n  throw new Error('Antwort der Mitarbeiter-API fehlt oder ist leer.');\n}\n\nlet raw = message.content;\nif (Array.isArray(raw)) {\n  const jsonPart = raw.find(part => part.type === 'json_schema' || part.type === 'json_object' || part.type === 'output_json');\n  if (jsonPart?.json) {\n    raw = jsonPart.json;\n  } else {\n    raw = raw.map(part => part.text ?? '').join('\\n');\n  }\n}\n\nif (typeof raw === 'object') {\n  raw = JSON.stringify(raw);\n}\n\nconst data = JSON.parse(raw);\nlet mitarbeiter = data.mitarbeiter ?? data;\n\nif (!Array.isArray(mitarbeiter)) {\n  mitarbeiter = [mitarbeiter];\n}\n\n// Hole globalData\nconst globalData = $getWorkflowStaticData('global');\nconst alleMitarbeiter = globalData.alleMitarbeiter || [];\nconst context = globalData.mitarbeiterContext || {};\n\n// FÃ¼ge neue Mitarbeiter hinzu mit fortlaufenden IDs\nconst startIndex = alleMitarbeiter.length;\nmitarbeiter = mitarbeiter.map((ma, index) => ({\n  ...ma,\n  id: `emp_${String(startIndex + index + 1).padStart(3, '0')}`,\n  unternehmen_id: unternehmen.id ?? '',\n  vollname: `${ma.vorname ?? ''} ${ma.nachname ?? ''}`.trim(),\n  geschlecht: ma.geschlecht || 'divers',\n  motivation: ma.motivation || 'mittel',\n  intelligenz: ma.intelligenz || 'mittel',\n}));\n\n// Speichere in globalData\nglobalData.alleMitarbeiter = [...alleMitarbeiter, ...mitarbeiter];\n\nconsole.log('=== MITARBEITER PARSEN ===');\nconsole.log('Neue Mitarbeiter:', mitarbeiter.length);\nconsole.log('Gesamt:', globalData.alleMitarbeiter.length);\nconsole.log('Verbleibende Rollen:', (context.rollen?.length || 0) - Math.floor(globalData.alleMitarbeiter.length / 2));\n\n// PrÃ¼fe, ob alle Rollen abgearbeitet wurden\nconst alleRollenBearbeitet = globalData.alleMitarbeiter.length >= (context.rollen?.length || 0);\n\nreturn [{ json: { mitarbeiter, isFinal: alleRollenBearbeitet } }];\n"
      },
      "id": "917c83bd-3a09-436e-b88f-e9887981c456",
      "name": "Mitarbeiter Antwort Parsen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2160,
        -128
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Kontext + Prozesse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse extrahieren": {
      "main": [
        [
          {
            "node": "Prozesse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Prozesse)": {
      "main": [
        [
          {
            "node": "Prozesse extrahieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mitarbeiteriteration vorbereiten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Prozesse erstellen": {
      "main": [
        [
          {
            "node": "Prozessantwort parsen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Prozesse filtern": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC Datei lesen": {
      "main": [
        [
          {
            "node": "APQC Prozesse filtern",
            "type": "main",
            "index": 0
          },
          {
            "node": "APQC AktivitÃ¤ten filtern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter extrahieren": {
      "main": [
        [
          {
            "node": "Mitarbeiter JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen extrahieren": {
      "main": [
        [
          {
            "node": "Rollen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen extrahieren": {
      "main": [
        [
          {
            "node": "Abteilungen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unternehmen extrahieren": {
      "main": [
        [
          {
            "node": "Unternehmen JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Rollen)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP: Rollen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Rollen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Konfiguration": {
      "main": [
        [
          {
            "node": "APQC Datei lesen",
            "type": "main",
            "index": 0
          },
          {
            "node": "Demo-Daten (Alle)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter fÃ¼r API-Calls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter fÃ¼r API-Calls": {
      "main": [
        [
          {
            "node": "HTTP: Unternehmen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Demo-Daten (Alle)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP: Unternehmen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Unternehmen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Unternehmen)": {
      "main": [
        [
          {
            "node": "HTTP: Abteilungen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Abteilungen erstellen": {
      "main": [
        [
          {
            "node": "JSON parsen (Abteilungen)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (Abteilungen)": {
      "main": [
        [
          {
            "node": "HTTP: Rollen erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Konfiguration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Beschreibungen zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten aggregieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten aggregieren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten extrahieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten extrahieren": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen JSON": {
      "main": [
        [
          {
            "node": "Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen JSON": {
      "main": [
        [
          {
            "node": "Dateien + Rollen zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Rollen zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse JSON": {
      "main": [
        [
          {
            "node": "Dateien + Prozesse zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + Prozesse zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten JSON": {
      "main": [
        [
          {
            "node": "Dateien + AktivitÃ¤ten zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Dateien + AktivitÃ¤ten zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter JSON": {
      "main": [
        [
          {
            "node": "Alle Dateien zusammenfÃ¼hren",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Alle Dateien zusammenfÃ¼hren": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessiteration vorbereiten": {
      "main": [
        [
          {
            "node": "Abteilungen iterieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prozessiteration Abschluss",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungen iterieren": {
      "main": [
        [
          {
            "node": "Abteilungskontext erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Abteilungskontext erstellen": {
      "main": [
        [
          {
            "node": "HTTP: Prozesse erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessantwort parsen": {
      "main": [
        [
          {
            "node": "VerfÃ¼gbare Prozesse aktualisieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VerfÃ¼gbare Prozesse aktualisieren": {
      "main": [
        [
          {
            "node": "Abteilungen iterieren",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prozessiteration Abschluss",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozessiteration Abschluss": {
      "main": [
        [
          {
            "node": "JSON parsen (Prozesse)",
            "type": "main",
            "index": 0
          },
          {
            "node": "AktivitÃ¤tsiteration vorbereiten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kontext + Prozesse": {
      "main": [
        [
          {
            "node": "Prozessiteration vorbereiten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤tsiteration vorbereiten": {
      "main": [
        [
          {
            "node": "AktivitÃ¤tskontext erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: APQC oder KI AktivitÃ¤ten": {
      "main": [
        [
          {
            "node": "Prozesse Iterieren (APQC AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prozesse Iterieren (KI AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤tskontext erstellen": {
      "main": [
        [
          {
            "node": "IF: APQC oder KI AktivitÃ¤ten",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC AktivitÃ¤ten extrahieren": {
      "main": [
        [
          {
            "node": "APQC AktivitÃ¤ten zuordnen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KI-AktivitÃ¤ten Prompt erstellen": {
      "main": [
        [
          {
            "node": "HTTP: AktivitÃ¤ten erstellen (KI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: AktivitÃ¤ten erstellen (KI)": {
      "main": [
        [
          {
            "node": "KI-AktivitÃ¤ten parsen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KI-AktivitÃ¤ten parsen": {
      "main": [
        [
          {
            "node": "KI AktivitÃ¤ten zuordnen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC AktivitÃ¤ten zuordnen": {
      "main": [
        [
          {
            "node": "VerfÃ¼gbare Prozesse aktualisieren (APQC AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VerfÃ¼gbare Prozesse aktualisieren (APQC AktivitÃ¤ten)": {
      "main": [
        [
          {
            "node": "Prozesse Iterieren (APQC AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          },
          {
            "node": "APQC AktivitÃ¤tsiteration Abschluss",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KI AktivitÃ¤ten zuordnen": {
      "main": [
        [
          {
            "node": "KI AktivitÃ¤tsiteration Abschluss",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prozesse Iterieren (KI AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse Iterieren (APQC AktivitÃ¤ten)": {
      "main": [
        [
          {
            "node": "APQC AktivitÃ¤ten extrahieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prozesse Iterieren (KI AktivitÃ¤ten)": {
      "main": [
        [
          {
            "node": "KI-AktivitÃ¤ten Prompt erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiteriteration vorbereiten": {
      "main": [
        [
          {
            "node": "Rollen iterieren (Mitarbeiter-Erstellung)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rollen iterieren (Mitarbeiter-Erstellung)": {
      "main": [
        [
          {
            "node": "HTTP: Mitarbeiter erstellen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiter erstellen": {
      "main": [
        [
          {
            "node": "Mitarbeiter Antwort Parsen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten iterieren (Beschreibungs-Erstellung)": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "APQC AktivitÃ¤tsiteration Abschluss": {
      "main": [
        [
          {
            "node": "Mitarbeiter zu AktivitÃ¤ten zuordnen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KI AktivitÃ¤tsiteration Abschluss": {
      "main": [
        [
          {
            "node": "Mitarbeiter zu AktivitÃ¤ten zuordnen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter zu AktivitÃ¤ten zuordnen": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten iterieren (Beschreibungs-Erstellung)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AktivitÃ¤ten mit Mitarbeiter-Kontext anreichern": {
      "main": [
        [
          {
            "node": "HTTP: Mitarbeiterbeschreibungen generieren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Mitarbeiterbeschreibungen generieren": {
      "main": [
        [
          {
            "node": "JSON parsen (AktivitÃ¤ten)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON parsen (AktivitÃ¤ten)": {
      "main": [
        [
          {
            "node": "AktivitÃ¤ten iterieren (Beschreibungs-Erstellung)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Beschreibungen zusammenfÃ¼hren",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiter Antwort Parsen": {
      "main": [
        [
          {
            "node": "Rollen iterieren (Mitarbeiter-Erstellung)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mitarbeiteriteration Abschluss",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mitarbeiteriteration Abschluss": {
      "main": [
        [
          {
            "node": "Mitarbeiter zu AktivitÃ¤ten zuordnen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "93e5ab1b-62b9-43d7-977a-70bb6cd7d6f8",
  "meta": {
    "instanceId": "978683d95f2fec9645576a18fcc11fe4832fe617757398b1b4c3c46245f2e93c"
  },
  "id": "AN4dNNt9Nu0nZo7p",
  "tags": []
}